
Placa_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b9c  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080048d4  080048d4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d4  080048d4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080048dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000088  08004964  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004964  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000715d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001654  00000000  00000000  0002720e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016c31  00000000  00000000  00028f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000062d8  00000000  00000000  0003fb99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00081590  00000000  00000000  00045e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c7401  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000630  00000000  00000000  000c7480  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001dcc  00000000  00000000  000c7ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d20 	.word	0x08002d20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002d20 	.word	0x08002d20

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f001 fb36 	bl	80017c6 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f001 fb2a 	bl	80017c6 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 fb1e 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f001 f8a4 	bl	80012d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 fb16 	bl	80017c6 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 fb07 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 ff87 	bl	80020d4 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	200000b8 	.word	0x200000b8

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 faed 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 ff6c 	bl	80020d4 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	200000b8 	.word	0x200000b8

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f827 	bl	80012d8 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08004818 	.word	0x08004818
 8000340:	08004854 	.word	0x08004854
 8000344:	08004864 	.word	0x08004864

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003b0:	b082      	sub	sp, #8
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b089      	sub	sp, #36	; 0x24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	460b      	mov	r3, r1
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d6:	4413      	add	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2dc      	uxtb	r4, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003e6:	4413      	add	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4622      	mov	r2, r4
 80003f0:	f7ff ff54 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	e043      	b.n	8000482 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	3b20      	subs	r3, #32
 8000400:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000404:	fb01 f303 	mul.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	4413      	add	r3, r2
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	e029      	b.n	8000470 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00e      	beq.n	800044a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800042c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	743b      	strb	r3, [r7, #16]
 8000436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000438:	b2db      	uxtb	r3, r3
 800043a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <ST7735_WriteData>
 8000448:	e00f      	b.n	800046a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
 8000456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feb7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4293      	cmp	r3, r2
 800047a:	d3cf      	bcc.n	800041c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	3301      	adds	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000486:	461a      	mov	r2, r3
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4293      	cmp	r3, r2
 800048c:	d3b5      	bcc.n	80003fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr

0800049c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800049c:	b082      	sub	sp, #8
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af04      	add	r7, sp, #16
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	4603      	mov	r3, r0
 80004aa:	80fb      	strh	r3, [r7, #6]
 80004ac:	460b      	mov	r3, r1
 80004ae:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004b0:	f7ff fe4c 	bl	800014c <ST7735_Select>

    while(*str) {
 80004b4:	e02d      	b.n	8000512 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	7d3a      	ldrb	r2, [r7, #20]
 80004ba:	4413      	add	r3, r2
 80004bc:	2b9f      	cmp	r3, #159	; 0x9f
 80004be:	dd13      	ble.n	80004e8 <ST7735_WriteString+0x4c>
            x = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004ce:	88bb      	ldrh	r3, [r7, #4]
 80004d0:	7d7a      	ldrb	r2, [r7, #21]
 80004d2:	4413      	add	r3, r2
 80004d4:	2b4f      	cmp	r3, #79	; 0x4f
 80004d6:	dc21      	bgt.n	800051c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d103      	bne.n	80004e8 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
                continue;
 80004e6:	e014      	b.n	8000512 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	88f8      	ldrh	r0, [r7, #6]
 80004f0:	8c3b      	ldrh	r3, [r7, #32]
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	8bbb      	ldrh	r3, [r7, #28]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f7ff ff57 	bl	80003b0 <ST7735_WriteChar>
        x += font.width;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	80fb      	strh	r3, [r7, #6]
        str++;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1cd      	bne.n	80004b6 <ST7735_WriteString+0x1a>
 800051a:	e000      	b.n	800051e <ST7735_WriteString+0x82>
                break;
 800051c:	bf00      	nop
    }

    ST7735_Unselect();
 800051e:	f7ff fe21 	bl	8000164 <ST7735_Unselect>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b002      	add	sp, #8
 800052e:	4770      	bx	lr

08000530 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b9f      	cmp	r3, #159	; 0x9f
 8000552:	d859      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d856      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4413      	add	r3, r2
 8000560:	3b01      	subs	r3, #1
 8000562:	2b9f      	cmp	r3, #159	; 0x9f
 8000564:	dd03      	ble.n	800056e <ST7735_FillRectangle+0x3e>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800056c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	883b      	ldrh	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	3b01      	subs	r3, #1
 8000576:	2b4f      	cmp	r3, #79	; 0x4f
 8000578:	dd03      	ble.n	8000582 <ST7735_FillRectangle+0x52>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000580:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000582:	f7ff fde3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3b01      	subs	r3, #1
 800059c:	b2dc      	uxtb	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4622      	mov	r2, r4
 80005b0:	f7ff fe74 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b4:	8c3b      	ldrh	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	8c3b      	ldrh	r3, [r7, #32]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <ST7735_FillRectangle+0xe0>)
 80005ca:	f001 f8fc 	bl	80017c6 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	e013      	b.n	80005fc <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	e00a      	b.n	80005f0 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2202      	movs	r2, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <ST7735_FillRectangle+0xe4>)
 80005e6:	f001 fd75 	bl	80020d4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000602:	f7ff fdaf 	bl	8000164 <ST7735_Unselect>
 8000606:	e000      	b.n	800060a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000608:	bf00      	nop
}
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	200000b8 	.word	0x200000b8

08000618 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2350      	movs	r3, #80	; 0x50
 8000628:	22a0      	movs	r2, #160	; 0xa0
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff7f 	bl	8000530 <ST7735_FillRectangle>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <ST7735_DrawLine>:
	ST7735_WriteCommand(ST7735_GAMSET);
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b087      	sub	sp, #28
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
	    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000662:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000666:	8879      	ldrh	r1, [r7, #2]
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	bfcc      	ite	gt
 8000676:	2301      	movgt	r3, #1
 8000678:	2300      	movle	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	827b      	strh	r3, [r7, #18]
	    if (steep) {
 800067e:	8a7b      	ldrh	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <ST7735_DrawLine+0x62>
			swap = x0;
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	823b      	strh	r3, [r7, #16]
			x0 = y0;
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	80fb      	strh	r3, [r7, #6]
			y0 = swap;
 800068c:	8a3b      	ldrh	r3, [r7, #16]
 800068e:	80bb      	strh	r3, [r7, #4]

			swap = x1;
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	823b      	strh	r3, [r7, #16]
			x1 = y1;
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	807b      	strh	r3, [r7, #2]
			y1 = swap;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, y0);
	        //_swap_int16_t(x1, y1);
	    }

	    if (x0 > x1) {
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d90b      	bls.n	80006bc <ST7735_DrawLine+0x82>
			swap = x0;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	823b      	strh	r3, [r7, #16]
			x0 = x1;
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	80fb      	strh	r3, [r7, #6]
			x1 = swap;
 80006ac:	8a3b      	ldrh	r3, [r7, #16]
 80006ae:	807b      	strh	r3, [r7, #2]

			swap = y0;
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	823b      	strh	r3, [r7, #16]
			y0 = y1;
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	80bb      	strh	r3, [r7, #4]
			y1 = swap;
 80006b8:	8a3b      	ldrh	r3, [r7, #16]
 80006ba:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, x1);
	        //_swap_int16_t(y0, y1);
	    }

	    int16_t dx, dy;
	    dx = x1 - x0;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	81fb      	strh	r3, [r7, #14]
	    dy = ABS(y1 - y0);
 80006c6:	883a      	ldrh	r2, [r7, #0]
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bfb8      	it	lt
 80006d0:	425b      	neglt	r3, r3
 80006d2:	81bb      	strh	r3, [r7, #12]

	    int16_t err = dx / 2;
 80006d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	82fb      	strh	r3, [r7, #22]
	    int16_t ystep;

	    if (y0 < y1) {
 80006e0:	88ba      	ldrh	r2, [r7, #4]
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d202      	bcs.n	80006ee <ST7735_DrawLine+0xb4>
	        ystep = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	82bb      	strh	r3, [r7, #20]
 80006ec:	e028      	b.n	8000740 <ST7735_DrawLine+0x106>
	    } else {
	        ystep = -1;
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	82bb      	strh	r3, [r7, #20]
	    }

	    for (; x0<=x1; x0++) {
 80006f4:	e024      	b.n	8000740 <ST7735_DrawLine+0x106>
	        if (steep) {
 80006f6:	8a7b      	ldrh	r3, [r7, #18]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <ST7735_DrawLine+0xd0>
	            ST7735_DrawPixel(y0, x0, color);
 80006fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006fe:	88f9      	ldrh	r1, [r7, #6]
 8000700:	88bb      	ldrh	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe20 	bl	8000348 <ST7735_DrawPixel>
 8000708:	e005      	b.n	8000716 <ST7735_DrawLine+0xdc>
	        } else {
	        	ST7735_DrawPixel(x0, y0, color);
 800070a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fe19 	bl	8000348 <ST7735_DrawPixel>
	        }
	        err -= dy;
 8000716:	8afa      	ldrh	r2, [r7, #22]
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	82fb      	strh	r3, [r7, #22]
	        if (err < 0) {
 8000720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000724:	2b00      	cmp	r3, #0
 8000726:	da08      	bge.n	800073a <ST7735_DrawLine+0x100>
	            y0 += ystep;
 8000728:	8aba      	ldrh	r2, [r7, #20]
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
	            err += dx;
 8000730:	8afa      	ldrh	r2, [r7, #22]
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	4413      	add	r3, r2
 8000736:	b29b      	uxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
	    for (; x0<=x1; x0++) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d9d6      	bls.n	80006f6 <ST7735_DrawLine+0xbc>
	        }
	    }
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fd5d 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f87f 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f8f7 	bl	8000950 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000762:	f000 f8bd 	bl	80008e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000766:	f7ff fdd5 	bl	8000314 <ST7735_Init>
  ST7735_FillScreen(WHITE);
 800076a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800076e:	f7ff ff53 	bl	8000618 <ST7735_FillScreen>
  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000772:	2300      	movs	r3, #0
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	231d      	movs	r3, #29
 8000778:	226e      	movs	r2, #110	; 0x6e
 800077a:	211d      	movs	r1, #29
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f7ff ff5c 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2331      	movs	r3, #49	; 0x31
 8000788:	226e      	movs	r2, #110	; 0x6e
 800078a:	2131      	movs	r1, #49	; 0x31
 800078c:	2032      	movs	r0, #50	; 0x32
 800078e:	f7ff ff54 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(70, 9, 70, 69, BLACK);
 8000792:	2300      	movs	r3, #0
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2345      	movs	r3, #69	; 0x45
 8000798:	2246      	movs	r2, #70	; 0x46
 800079a:	2109      	movs	r1, #9
 800079c:	2046      	movs	r0, #70	; 0x46
 800079e:	f7ff ff4c 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(90, 9, 90, 69, BLACK);
 80007a2:	2300      	movs	r3, #0
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2345      	movs	r3, #69	; 0x45
 80007a8:	225a      	movs	r2, #90	; 0x5a
 80007aa:	2109      	movs	r1, #9
 80007ac:	205a      	movs	r0, #90	; 0x5a
 80007ae:	f7ff ff44 	bl	800063a <ST7735_DrawLine>

  char buffer [10];
  pontosO++;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <main+0xfc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <main+0xfc>)
 80007ba:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "o:%d", pontosO);
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <main+0xfc>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4923      	ldr	r1, [pc, #140]	; (8000850 <main+0x100>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ff4f 	bl	8002668 <siprintf>
  ST7735_WriteString(126, 61, buffer , Font_7x10, BLACK, WHITE);
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <main+0x104>)
 80007cc:	1d39      	adds	r1, r7, #4
 80007ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d2:	9202      	str	r2, [sp, #8]
 80007d4:	2200      	movs	r2, #0
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	9200      	str	r2, [sp, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	460a      	mov	r2, r1
 80007e0:	213d      	movs	r1, #61	; 0x3d
 80007e2:	207e      	movs	r0, #126	; 0x7e
 80007e4:	f7ff fe5a 	bl	800049c <ST7735_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  piscaCursor();
 80007e8:	f000 fa1e 	bl	8000c28 <piscaCursor>
	  if (botEsquerda) {
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	4819      	ldr	r0, [pc, #100]	; (8000858 <main+0x108>)
 80007f2:	f000 ffd1 	bl	8001798 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <main+0xb0>
	 cursorParaEsquerda();
 80007fc:	f000 f9b2 	bl	8000b64 <cursorParaEsquerda>
	  }

	  if (botDireita) {
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <main+0x108>)
 8000806:	f000 ffc7 	bl	8001798 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <main+0xc4>
	  cursorParaDireita();
 8000810:	f000 f94e 	bl	8000ab0 <cursorParaDireita>
	  }

	  if (botBaixo) {
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <main+0x108>)
 800081a:	f000 ffbd 	bl	8001798 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <main+0xde>
	  alternaJogador();
 8000824:	f000 f9e8 	bl	8000bf8 <alternaJogador>
	  HAL_Delay(200);
 8000828:	20c8      	movs	r0, #200	; 0xc8
 800082a:	f000 fd55 	bl	80012d8 <HAL_Delay>
	  }

	  if (botCima) {
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <main+0x108>)
 8000834:	f000 ffb0 	bl	8001798 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1d4      	bne.n	80007e8 <main+0x98>
	  fimJogada();
 800083e:	f000 fa83 	bl	8000d48 <fimJogada>
	  HAL_Delay(300);
 8000842:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000846:	f000 fd47 	bl	80012d8 <HAL_Delay>
	  piscaCursor();
 800084a:	e7cd      	b.n	80007e8 <main+0x98>
 800084c:	200000a8 	.word	0x200000a8
 8000850:	08002d3c 	.word	0x08002d3c
 8000854:	20000000 	.word	0x20000000
 8000858:	40010800 	.word	0x40010800

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe3e 	bl	80024ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000892:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffab 	bl	80017f8 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008a8:	f000 fbb6 	bl	8001018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2102      	movs	r1, #2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fa16 	bl	8001cf8 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008d2:	f000 fba1 	bl	8001018 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3740      	adds	r7, #64	; 0x40
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_SPI1_Init+0x68>)
 80008e6:	4a19      	ldr	r2, [pc, #100]	; (800094c <MX_SPI1_Init+0x6c>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI1_Init+0x68>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_SPI1_Init+0x68>)
 80008f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_SPI1_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_SPI1_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI1_Init+0x68>)
 800090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI1_Init+0x68>)
 8000916:	2220      	movs	r2, #32
 8000918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_SPI1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_SPI1_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI1_Init+0x68>)
 800092e:	220a      	movs	r2, #10
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_SPI1_Init+0x68>)
 8000934:	f001 fb4a 	bl	8001fcc <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800093e:	f000 fb6b 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000b8 	.word	0x200000b8
 800094c:	40013000 	.word	0x40013000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MX_GPIO_Init+0xb4>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <MX_GPIO_Init+0xb4>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_GPIO_Init+0xb4>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_GPIO_Init+0xb4>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <MX_GPIO_Init+0xb4>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_GPIO_Init+0xb4>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2110      	movs	r1, #16
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0xb8>)
 800099a:	f000 ff14 	bl	80017c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 800099e:	2200      	movs	r2, #0
 80009a0:	217b      	movs	r1, #123	; 0x7b
 80009a2:	481a      	ldr	r0, [pc, #104]	; (8000a0c <MX_GPIO_Init+0xbc>)
 80009a4:	f000 ff0f 	bl	80017c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 80009a8:	2310      	movs	r3, #16
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009c0:	f000 fd90 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 80009c4:	237b      	movs	r3, #123	; 0x7b
 80009c6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0xbc>)
 80009dc:	f000 fd82 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009e0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80009e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009f6:	f000 fd75 	bl	80014e4 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <desenhaQuad>:

/* USER CODE BEGIN 4 */
void desenhaQuad (short linha, short coluna, const char* chr) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	4603      	mov	r3, r0
 8000a18:	603a      	str	r2, [r7, #0]
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	80bb      	strh	r3, [r7, #4]
	short posX = 50 + 20 * (linha - 1);
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	3332      	adds	r3, #50	; 0x32
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	81fb      	strh	r3, [r7, #14]
	short posY = 9 + 20 * (coluna - 1 );
 8000a38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	3309      	adds	r3, #9
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	81bb      	strh	r3, [r7, #12]
	  ST7735_WriteString(posX + DeslocX, posY + DeslocY, chr , FonteQuad, BLACK, WHITE);
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	3302      	adds	r3, #2
 8000a54:	b298      	uxth	r0, r3
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <desenhaQuad+0x70>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	9202      	str	r2, [sp, #8]
 8000a64:	2200      	movs	r2, #0
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	9200      	str	r2, [sp, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	f7ff fd14 	bl	800049c <ST7735_WriteString>
	  consertaTabuleiro();
 8000a74:	f000 f806 	bl	8000a84 <consertaTabuleiro>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000008 	.word	0x20000008

08000a84 <consertaTabuleiro>:
void consertaTabuleiro () {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af02      	add	r7, sp, #8
	  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	231d      	movs	r3, #29
 8000a90:	226e      	movs	r2, #110	; 0x6e
 8000a92:	211d      	movs	r1, #29
 8000a94:	2032      	movs	r0, #50	; 0x32
 8000a96:	f7ff fdd0 	bl	800063a <ST7735_DrawLine>
	  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2331      	movs	r3, #49	; 0x31
 8000aa0:	226e      	movs	r2, #110	; 0x6e
 8000aa2:	2131      	movs	r1, #49	; 0x31
 8000aa4:	2032      	movs	r0, #50	; 0x32
 8000aa6:	f7ff fdc8 	bl	800063a <ST7735_DrawLine>
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <cursorParaDireita>:
void cursorParaDireita () {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	short i;
	for (i = 1; i <=9; i++) {
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	e041      	b.n	8000b40 <cursorParaDireita+0x90>
	cursorX++;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <cursorParaDireita+0xa8>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <cursorParaDireita+0xa8>)
 8000acc:	801a      	strh	r2, [r3, #0]
	if (cursorX == 4 && cursorY == 3) {
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <cursorParaDireita+0xa8>)
 8000ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d10b      	bne.n	8000af0 <cursorParaDireita+0x40>
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <cursorParaDireita+0xac>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d106      	bne.n	8000af0 <cursorParaDireita+0x40>
		cursorX = 1;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <cursorParaDireita+0xa8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	801a      	strh	r2, [r3, #0]
		cursorY = 1;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <cursorParaDireita+0xac>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	801a      	strh	r2, [r3, #0]
 8000aee:	e010      	b.n	8000b12 <cursorParaDireita+0x62>
	} else if (cursorX == 4) {
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <cursorParaDireita+0xa8>)
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d10b      	bne.n	8000b12 <cursorParaDireita+0x62>
		cursorX = 1;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <cursorParaDireita+0xa8>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	801a      	strh	r2, [r3, #0]
	    cursorY++;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <cursorParaDireita+0xac>)
 8000b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <cursorParaDireita+0xac>)
 8000b10:	801a      	strh	r2, [r3, #0]
	}

	if (matriz[cursorX - 1][cursorY - 1] == 0)
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <cursorParaDireita+0xa8>)
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <cursorParaDireita+0xac>)
 8000b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b20:	1e59      	subs	r1, r3, #1
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <cursorParaDireita+0xb0>)
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00d      	beq.n	8000b50 <cursorParaDireita+0xa0>
	for (i = 1; i <=9; i++) {
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	ddb9      	ble.n	8000abc <cursorParaDireita+0xc>
		return;

	}
	fimRodada(0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fa3b 	bl	8000fc4 <fimRodada>
 8000b4e:	e000      	b.n	8000b52 <cursorParaDireita+0xa2>
		return;
 8000b50:	bf00      	nop
}
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	20000012 	.word	0x20000012
 8000b60:	20000110 	.word	0x20000110

08000b64 <cursorParaEsquerda>:
void cursorParaEsquerda () {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	for (;;) {
	cursorX--;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <cursorParaEsquerda+0x88>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <cursorParaEsquerda+0x88>)
 8000b78:	801a      	strh	r2, [r3, #0]
	if (cursorX == 0 && cursorY == 1) {
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <cursorParaEsquerda+0x88>)
 8000b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10b      	bne.n	8000b9c <cursorParaEsquerda+0x38>
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <cursorParaEsquerda+0x8c>)
 8000b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d106      	bne.n	8000b9c <cursorParaEsquerda+0x38>
		cursorX = 3;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <cursorParaEsquerda+0x88>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	801a      	strh	r2, [r3, #0]
		cursorY = 3;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <cursorParaEsquerda+0x8c>)
 8000b96:	2203      	movs	r2, #3
 8000b98:	801a      	strh	r2, [r3, #0]
 8000b9a:	e010      	b.n	8000bbe <cursorParaEsquerda+0x5a>
	} else if (cursorX == 0) {
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <cursorParaEsquerda+0x88>)
 8000b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <cursorParaEsquerda+0x5a>
		cursorX = 3;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <cursorParaEsquerda+0x88>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	801a      	strh	r2, [r3, #0]
		cursorY--;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <cursorParaEsquerda+0x8c>)
 8000bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <cursorParaEsquerda+0x8c>)
 8000bbc:	801a      	strh	r2, [r3, #0]
	}

	if (matriz[cursorX - 1][cursorY - 1] == 0)
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <cursorParaEsquerda+0x88>)
 8000bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <cursorParaEsquerda+0x8c>)
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	1e59      	subs	r1, r3, #1
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <cursorParaEsquerda+0x90>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d000      	beq.n	8000be2 <cursorParaEsquerda+0x7e>
	cursorX--;
 8000be0:	e7c2      	b.n	8000b68 <cursorParaEsquerda+0x4>
		break;
 8000be2:	bf00      	nop

	}
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000010 	.word	0x20000010
 8000bf0:	20000012 	.word	0x20000012
 8000bf4:	20000110 	.word	0x20000110

08000bf8 <alternaJogador>:
void alternaJogador() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	if (*jogador == 'x') {
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <alternaJogador+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b78      	cmp	r3, #120	; 0x78
 8000c04:	d103      	bne.n	8000c0e <alternaJogador+0x16>
	   	jogador = "o";
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <alternaJogador+0x24>)
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <alternaJogador+0x28>)
 8000c0a:	601a      	str	r2, [r3, #0]
	    } else {
	   	jogador = "x";
	    }
}
 8000c0c:	e002      	b.n	8000c14 <alternaJogador+0x1c>
	   	jogador = "x";
 8000c0e:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <alternaJogador+0x24>)
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <alternaJogador+0x2c>)
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000014 	.word	0x20000014
 8000c20:	08002d44 	.word	0x08002d44
 8000c24:	08002d38 	.word	0x08002d38

08000c28 <piscaCursor>:
void piscaCursor() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	while (1) {
		desenhaQuad (cursorX, cursorY, jogador);
 8000c2e:	4b41      	ldr	r3, [pc, #260]	; (8000d34 <piscaCursor+0x10c>)
 8000c30:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000c34:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <piscaCursor+0x110>)
 8000c36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c3a:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <piscaCursor+0x114>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f7ff fee6 	bl	8000a10 <desenhaQuad>
		for (int x=0;x<20;x++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e033      	b.n	8000cb2 <piscaCursor+0x8a>
		{
			HAL_Delay(50);
 8000c4a:	2032      	movs	r0, #50	; 0x32
 8000c4c:	f000 fb44 	bl	80012d8 <HAL_Delay>
			if (botCima || botDireita || botEsquerda || botBaixo)
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	483a      	ldr	r0, [pc, #232]	; (8000d40 <piscaCursor+0x118>)
 8000c56:	f000 fd9f 	bl	8001798 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d017      	beq.n	8000c90 <piscaCursor+0x68>
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4836      	ldr	r0, [pc, #216]	; (8000d40 <piscaCursor+0x118>)
 8000c66:	f000 fd97 	bl	8001798 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00f      	beq.n	8000c90 <piscaCursor+0x68>
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4832      	ldr	r0, [pc, #200]	; (8000d40 <piscaCursor+0x118>)
 8000c76:	f000 fd8f 	bl	8001798 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d007      	beq.n	8000c90 <piscaCursor+0x68>
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	482e      	ldr	r0, [pc, #184]	; (8000d40 <piscaCursor+0x118>)
 8000c86:	f000 fd87 	bl	8001798 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10d      	bne.n	8000cac <piscaCursor+0x84>
			{
				HAL_Delay(66);
 8000c90:	2042      	movs	r0, #66	; 0x42
 8000c92:	f000 fb21 	bl	80012d8 <HAL_Delay>
				desenhaQuad (cursorX, cursorY, " ");
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <piscaCursor+0x10c>)
 8000c98:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <piscaCursor+0x110>)
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <piscaCursor+0x11c>)
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff feb3 	bl	8000a10 <desenhaQuad>
				return;
 8000caa:	e040      	b.n	8000d2e <piscaCursor+0x106>
		for (int x=0;x<20;x++)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b13      	cmp	r3, #19
 8000cb6:	ddc8      	ble.n	8000c4a <piscaCursor+0x22>
			}
		}
		desenhaQuad (cursorX, cursorY, " ");
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <piscaCursor+0x10c>)
 8000cba:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <piscaCursor+0x110>)
 8000cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <piscaCursor+0x11c>)
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff fea2 	bl	8000a10 <desenhaQuad>
		for (int x=0;x<20;x++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	e029      	b.n	8000d26 <piscaCursor+0xfe>
		{
			HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	; 0x32
 8000cd4:	f000 fb00 	bl	80012d8 <HAL_Delay>
			if (botCima || botDireita || botEsquerda || botBaixo)
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4818      	ldr	r0, [pc, #96]	; (8000d40 <piscaCursor+0x118>)
 8000cde:	f000 fd5b 	bl	8001798 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d017      	beq.n	8000d18 <piscaCursor+0xf0>
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	4814      	ldr	r0, [pc, #80]	; (8000d40 <piscaCursor+0x118>)
 8000cee:	f000 fd53 	bl	8001798 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00f      	beq.n	8000d18 <piscaCursor+0xf0>
 8000cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <piscaCursor+0x118>)
 8000cfe:	f000 fd4b 	bl	8001798 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d007      	beq.n	8000d18 <piscaCursor+0xf0>
 8000d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <piscaCursor+0x118>)
 8000d0e:	f000 fd43 	bl	8001798 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d103      	bne.n	8000d20 <piscaCursor+0xf8>
			{
				HAL_Delay(66);
 8000d18:	2042      	movs	r0, #66	; 0x42
 8000d1a:	f000 fadd 	bl	80012d8 <HAL_Delay>
				return;
 8000d1e:	e006      	b.n	8000d2e <piscaCursor+0x106>
		for (int x=0;x<20;x++)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b13      	cmp	r3, #19
 8000d2a:	ddd2      	ble.n	8000cd2 <piscaCursor+0xaa>
		desenhaQuad (cursorX, cursorY, jogador);
 8000d2c:	e77f      	b.n	8000c2e <piscaCursor+0x6>
			}
		}
	}
}
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000010 	.word	0x20000010
 8000d38:	20000012 	.word	0x20000012
 8000d3c:	20000014 	.word	0x20000014
 8000d40:	40010800 	.word	0x40010800
 8000d44:	08002d48 	.word	0x08002d48

08000d48 <fimJogada>:
void fimJogada() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	if (*jogador == 'x') {
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <fimJogada+0x84>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b78      	cmp	r3, #120	; 0x78
 8000d54:	d110      	bne.n	8000d78 <fimJogada+0x30>
		matriz[cursorX - 1][cursorY - 1] = 1;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <fimJogada+0x88>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <fimJogada+0x8c>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	1e59      	subs	r1, r3, #1
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <fimJogada+0x90>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	2201      	movs	r2, #1
 8000d72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8000d76:	e010      	b.n	8000d9a <fimJogada+0x52>
	} else {
		matriz[cursorX - 1][cursorY - 1] = -1;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <fimJogada+0x88>)
 8000d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7e:	1e5a      	subs	r2, r3, #1
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <fimJogada+0x8c>)
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	1e59      	subs	r1, r3, #1
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <fimJogada+0x90>)
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d96:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	desenhaQuad (cursorX, cursorY, jogador);
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <fimJogada+0x88>)
 8000d9c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <fimJogada+0x8c>)
 8000da2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <fimJogada+0x84>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f7ff fe30 	bl	8000a10 <desenhaQuad>
	checarVitoria();
 8000db0:	f000 f814 	bl	8000ddc <checarVitoria>
	alternaJogador();
 8000db4:	f7ff ff20 	bl	8000bf8 <alternaJogador>
	cursorX = 0;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <fimJogada+0x88>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	801a      	strh	r2, [r3, #0]
	cursorY = 1;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <fimJogada+0x8c>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	801a      	strh	r2, [r3, #0]
	cursorParaDireita();
 8000dc4:	f7ff fe74 	bl	8000ab0 <cursorParaDireita>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000014 	.word	0x20000014
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000012 	.word	0x20000012
 8000dd8:	20000110 	.word	0x20000110

08000ddc <checarVitoria>:
void checarVitoria() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	short i = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	80fb      	strh	r3, [r7, #6]
	for (i=0; i<=2; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	e057      	b.n	8000e9c <checarVitoria+0xc0>
		if (matriz[i][0] + matriz[i][1] + matriz[i][2] == 3) {
 8000dec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000df0:	4973      	ldr	r1, [pc, #460]	; (8000fc0 <checarVitoria+0x1e4>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e06:	496e      	ldr	r1, [pc, #440]	; (8000fc0 <checarVitoria+0x1e4>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	440b      	add	r3, r1
 8000e12:	3302      	adds	r3, #2
 8000e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e18:	18c1      	adds	r1, r0, r3
 8000e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e1e:	4868      	ldr	r0, [pc, #416]	; (8000fc0 <checarVitoria+0x1e4>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4403      	add	r3, r0
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e30:	440b      	add	r3, r1
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d103      	bne.n	8000e3e <checarVitoria+0x62>
			fimRodada(1);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f000 f8c4 	bl	8000fc4 <fimRodada>
 8000e3c:	e028      	b.n	8000e90 <checarVitoria+0xb4>
		} else if (matriz[i][0] + matriz[i][1] + matriz[i][2] == -3) {
 8000e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e42:	495f      	ldr	r1, [pc, #380]	; (8000fc0 <checarVitoria+0x1e4>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e58:	4959      	ldr	r1, [pc, #356]	; (8000fc0 <checarVitoria+0x1e4>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	440b      	add	r3, r1
 8000e64:	3302      	adds	r3, #2
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6a:	18c1      	adds	r1, r0, r3
 8000e6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e70:	4853      	ldr	r0, [pc, #332]	; (8000fc0 <checarVitoria+0x1e4>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4403      	add	r3, r0
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	440b      	add	r3, r1
 8000e84:	f113 0f03 	cmn.w	r3, #3
 8000e88:	d102      	bne.n	8000e90 <checarVitoria+0xb4>
			fimRodada(2);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f000 f89a 	bl	8000fc4 <fimRodada>
	for (i=0; i<=2; i++) {
 8000e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3301      	adds	r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	80fb      	strh	r3, [r7, #6]
 8000e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	dda3      	ble.n	8000dec <checarVitoria+0x10>
		}
	}
	for (i=0; i<=2; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	e039      	b.n	8000f1e <checarVitoria+0x142>
		if (matriz[0][i] + matriz[1][i] + matriz[2][i] == 3) {
 8000eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eae:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <checarVitoria+0x1e4>)
 8000eb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <checarVitoria+0x1e4>)
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ec8:	493d      	ldr	r1, [pc, #244]	; (8000fc0 <checarVitoria+0x1e4>)
 8000eca:	3206      	adds	r2, #6
 8000ecc:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d103      	bne.n	8000ede <checarVitoria+0x102>
			fimRodada(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f874 	bl	8000fc4 <fimRodada>
 8000edc:	e019      	b.n	8000f12 <checarVitoria+0x136>
		} else if (matriz[0][i] + matriz[1][i] + matriz[2][i] == -3) {
 8000ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee2:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <checarVitoria+0x1e4>)
 8000ee4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eee:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <checarVitoria+0x1e4>)
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000efc:	4930      	ldr	r1, [pc, #192]	; (8000fc0 <checarVitoria+0x1e4>)
 8000efe:	3206      	adds	r2, #6
 8000f00:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000f04:	4413      	add	r3, r2
 8000f06:	f113 0f03 	cmn.w	r3, #3
 8000f0a:	d102      	bne.n	8000f12 <checarVitoria+0x136>
			fimRodada(2);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f000 f859 	bl	8000fc4 <fimRodada>
	for (i=0; i<=2; i++) {
 8000f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	80fb      	strh	r3, [r7, #6]
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	ddc1      	ble.n	8000eaa <checarVitoria+0xce>
		}
	}

	if (matriz[0][0] + matriz[1][1] + matriz[2][2] == 3) {
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f38:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d103      	bne.n	8000f4a <checarVitoria+0x16e>
		fimRodada(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 f83e 	bl	8000fc4 <fimRodada>
 8000f48:	e011      	b.n	8000f6e <checarVitoria+0x192>
	} else if (matriz[0][0] + matriz[1][1] + matriz[2][2] == -3) {
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f5c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000f60:	4413      	add	r3, r2
 8000f62:	f113 0f03 	cmn.w	r3, #3
 8000f66:	d102      	bne.n	8000f6e <checarVitoria+0x192>
		fimRodada(2);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f000 f82b 	bl	8000fc4 <fimRodada>
	}

	if (matriz[0][2] + matriz[1][1] + matriz[2][0] == 3) {
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f80:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d103      	bne.n	8000f92 <checarVitoria+0x1b6>
		fimRodada(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 f81a 	bl	8000fc4 <fimRodada>
	}
	/*char vetor[] = {'J','o','g'};
	 ST7735_WriteChar(posX + DeslocX, posY + DeslocY, vetor[0] , FonteQuad, BLACK, WHITE);
	 ST7735_WriteString(posX + DeslocX, posY + DeslocY, vetor[1] , FonteQuad, BLACK, WHITE);
	 ST7735_WriteString(posX + DeslocX, posY + DeslocY, vetor[2] , FonteQuad, BLACK, WHITE);*/
}
 8000f90:	e011      	b.n	8000fb6 <checarVitoria+0x1da>
	} else if (matriz[0][2] + matriz[1][1] + matriz[2][0] == -3) {
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <checarVitoria+0x1e4>)
 8000f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <checarVitoria+0x1e4>)
 8000fa4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	f113 0f03 	cmn.w	r3, #3
 8000fae:	d102      	bne.n	8000fb6 <checarVitoria+0x1da>
		fimRodada(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 f807 	bl	8000fc4 <fimRodada>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000110 	.word	0x20000110

08000fc4 <fimRodada>:
void fimRodada(short result) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	switch (result) {
 8000fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d007      	beq.n	8000fe6 <fimRodada+0x22>
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d00f      	beq.n	8000ffa <fimRodada+0x36>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d116      	bne.n	800100c <fimRodada+0x48>
	case 0:
		ST7735_FillScreen(BLACK);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fb1a 	bl	8000618 <ST7735_FillScreen>
		break;
 8000fe4:	e012      	b.n	800100c <fimRodada+0x48>
	case 1:
		pontosX++;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <fimRodada+0x4c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <fimRodada+0x4c>)
 8000fee:	6013      	str	r3, [r2, #0]
		ST7735_FillScreen(RED);
 8000ff0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000ff4:	f7ff fb10 	bl	8000618 <ST7735_FillScreen>
		break;
 8000ff8:	e008      	b.n	800100c <fimRodada+0x48>
	case 2:
		pontosO++;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <fimRodada+0x50>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <fimRodada+0x50>)
 8001002:	6013      	str	r3, [r2, #0]
		ST7735_FillScreen(BLUE);
 8001004:	201f      	movs	r0, #31
 8001006:	f7ff fb07 	bl	8000618 <ST7735_FillScreen>
		break;
 800100a:	bf00      	nop
	}
	while (1) {}
 800100c:	e7fe      	b.n	800100c <fimRodada+0x48>
 800100e:	bf00      	nop
 8001010:	200000a4 	.word	0x200000a4
 8001014:	200000a8 	.word	0x200000a8

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101e:	e7fe      	b.n	800101e <Error_Handler+0x6>

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_MspInit+0x5c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x5c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x60>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_MspInit+0x60>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000

08001084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0x70>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d123      	bne.n	80010ec <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_SPI_MspInit+0x74>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_SPI_MspInit+0x78>)
 80010e8:	f000 f9fc 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010800 	.word	0x40010800

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8ab 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f001 f98a 	bl	8002498 <__errno>
 8001184:	4602      	mov	r2, r0
 8001186:	230c      	movs	r3, #12
 8001188:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20005000 	.word	0x20005000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	20000130 	.word	0x20000130

080011bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ee:	f7ff ffe5 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f001 f957 	bl	80024a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff faab 	bl	8000750 <main>
  bx lr
 80011fa:	4770      	bx	lr
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001204:	080048dc 	.word	0x080048dc
  ldr r2, =_sbss
 8001208:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800120c:	2000012c 	.word	0x2000012c

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x28>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x28>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f929 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fef6 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f933 	bl	80014ca <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f909 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000018 	.word	0x20000018
 8001298:	20000020 	.word	0x20000020
 800129c:	2000001c 	.word	0x2000001c

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x1c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x20>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <HAL_IncTick+0x20>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000020 	.word	0x20000020
 80012c0:	20000124 	.word	0x20000124

080012c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <HAL_GetTick+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000124 	.word	0x20000124

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff fff0 	bl	80012c4 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffe0 	bl	80012c4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000020 	.word	0x20000020

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff90 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff49 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff5e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff90 	bl	80013d4 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5f 	bl	8001380 <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffb0 	bl	8001438 <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b08b      	sub	sp, #44	; 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e127      	b.n	8001748 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f8:	2201      	movs	r2, #1
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8116 	bne.w	8001742 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d034      	beq.n	8001588 <HAL_GPIO_Init+0xa4>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d80d      	bhi.n	800153e <HAL_GPIO_Init+0x5a>
 8001522:	2b02      	cmp	r3, #2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x9a>
 8001526:	2b02      	cmp	r3, #2
 8001528:	d804      	bhi.n	8001534 <HAL_GPIO_Init+0x50>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d031      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 800152e:	2b01      	cmp	r3, #1
 8001530:	d01c      	beq.n	800156c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001532:	e048      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001534:	2b03      	cmp	r3, #3
 8001536:	d043      	beq.n	80015c0 <HAL_GPIO_Init+0xdc>
 8001538:	2b11      	cmp	r3, #17
 800153a:	d01b      	beq.n	8001574 <HAL_GPIO_Init+0x90>
          break;
 800153c:	e043      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800153e:	4a89      	ldr	r2, [pc, #548]	; (8001764 <HAL_GPIO_Init+0x280>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d026      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001544:	4a87      	ldr	r2, [pc, #540]	; (8001764 <HAL_GPIO_Init+0x280>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d806      	bhi.n	8001558 <HAL_GPIO_Init+0x74>
 800154a:	4a87      	ldr	r2, [pc, #540]	; (8001768 <HAL_GPIO_Init+0x284>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d020      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001550:	4a86      	ldr	r2, [pc, #536]	; (800176c <HAL_GPIO_Init+0x288>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01d      	beq.n	8001592 <HAL_GPIO_Init+0xae>
          break;
 8001556:	e036      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001558:	4a85      	ldr	r2, [pc, #532]	; (8001770 <HAL_GPIO_Init+0x28c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 800155e:	4a85      	ldr	r2, [pc, #532]	; (8001774 <HAL_GPIO_Init+0x290>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d016      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001564:	4a84      	ldr	r2, [pc, #528]	; (8001778 <HAL_GPIO_Init+0x294>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xae>
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e028      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e023      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01e      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e019      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e012      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e008      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2bff      	cmp	r3, #255	; 0xff
 80015ca:	d801      	bhi.n	80015d0 <HAL_GPIO_Init+0xec>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	e001      	b.n	80015d4 <HAL_GPIO_Init+0xf0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2bff      	cmp	r3, #255	; 0xff
 80015da:	d802      	bhi.n	80015e2 <HAL_GPIO_Init+0xfe>
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x104>
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3b08      	subs	r3, #8
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	210f      	movs	r1, #15
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	6a39      	ldr	r1, [r7, #32]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8096 	beq.w	8001742 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_GPIO_Init+0x298>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_GPIO_Init+0x298>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_GPIO_Init+0x298>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800162e:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x29c>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_GPIO_Init+0x2a0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x19e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_GPIO_Init+0x2a4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x19a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a49      	ldr	r2, [pc, #292]	; (800178c <HAL_GPIO_Init+0x2a8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x196>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x2ac>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x192>
 8001672:	2303      	movs	r3, #3
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 8001676:	2304      	movs	r3, #4
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 8001682:	2300      	movs	r3, #0
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001694:	493a      	ldr	r1, [pc, #232]	; (8001780 <HAL_GPIO_Init+0x29c>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4938      	ldr	r1, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4933      	ldr	r1, [pc, #204]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	492e      	ldr	r1, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	43db      	mvns	r3, r3
 8001714:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001716:	4013      	ands	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	491a      	ldr	r1, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	43db      	mvns	r3, r3
 800173c:	4915      	ldr	r1, [pc, #84]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800173e:	4013      	ands	r3, r2
 8001740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f47f aed0 	bne.w	80014f8 <HAL_GPIO_Init+0x14>
  }
}
 8001758:	bf00      	nop
 800175a:	372c      	adds	r7, #44	; 0x2c
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	10210000 	.word	0x10210000
 8001768:	10110000 	.word	0x10110000
 800176c:	10120000 	.word	0x10120000
 8001770:	10310000 	.word	0x10310000
 8001774:	10320000 	.word	0x10320000
 8001778:	10220000 	.word	0x10220000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40011400 	.word	0x40011400
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]
 80017d2:	4613      	mov	r3, r2
 80017d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e26c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x12c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e246      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x76>
 8001860:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xbc>
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fcf6 	bl	80012c4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fcf2 	bl	80012c4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1fa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe4>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fce2 	bl	80012c4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fcde 	bl	80012c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1e6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x10c>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1ba      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fc97 	bl	80012c4 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fc93 	bl	80012c4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e19b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc76 	bl	80012c4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc72 	bl	80012c4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e17a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fc56 	bl	80012c4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fc52 	bl	80012c4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e15a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 faa8 	bl	8001f90 <RCC_Delay>
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fc3c 	bl	80012c4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fc38 	bl	80012c4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e140      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42420000 	.word	0x42420000
 8001a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a6 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b94      	ldr	r3, [pc, #592]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a93      	ldr	r2, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fbf9 	bl	80012c4 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fbf5 	bl	80012c4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0fd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x312>
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a66      	ldr	r2, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fba9 	bl	80012c4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fba5 	bl	80012c4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0ab      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x37e>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fb93 	bl	80012c4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fb8f 	bl	80012c4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e095      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8081 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d061      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d146      	bne.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb63 	bl	80012c4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff fb5f 	bl	80012c4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e067      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	492d      	ldr	r1, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb33 	bl	80012c4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb2f 	bl	80012c4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46a>
 8001c80:	e02f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fb1c 	bl	80012c4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff fb18 	bl	80012c4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420060 	.word	0x42420060

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa6c 	bl	80012c4 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff fa68 	bl	80012c4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9ca 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004890 	.word	0x08004890
 8001ec4:	20000018 	.word	0x20000018
 8001ec8:	2000001c 	.word	0x2000001c

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed4:	1d3c      	adds	r4, r7, #4
 8001ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0a:	e02d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c5b      	lsrs	r3, r3, #17
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	623b      	str	r3, [r7, #32]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc90      	pop	{r4, r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08002d4c 	.word	0x08002d4c
 8001f80:	08002d5c 	.word	0x08002d5c
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000018 	.word	0x20000018
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e076      	b.n	80020cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fee:	d009      	beq.n	8002004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	e005      	b.n	8002004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff f830 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	0c1a      	lsrs	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f002 0204 	and.w	r2, r2, #4
 80020aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_SPI_Transmit+0x22>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e126      	b.n	8002344 <HAL_SPI_Transmit+0x270>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020fe:	f7ff f8e1 	bl	80012c4 <HAL_GetTick>
 8002102:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d002      	beq.n	800211a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002114:	2302      	movs	r3, #2
 8002116:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002118:	e10b      	b.n	8002332 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Transmit+0x52>
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800212a:	e102      	b.n	8002332 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2203      	movs	r2, #3
 8002130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002172:	d10f      	bne.n	8002194 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002182:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002192:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d007      	beq.n	80021b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ba:	d14b      	bne.n	8002254 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_SPI_Transmit+0xf6>
 80021c4:	8afb      	ldrh	r3, [r7, #22]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d13e      	bne.n	8002248 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	1c9a      	adds	r2, r3, #2
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021ee:	e02b      	b.n	8002248 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d112      	bne.n	8002224 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	1c9a      	adds	r2, r3, #2
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36
 8002222:	e011      	b.n	8002248 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002224:	f7ff f84e 	bl	80012c4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d803      	bhi.n	800223c <HAL_SPI_Transmit+0x168>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223a:	d102      	bne.n	8002242 <HAL_SPI_Transmit+0x16e>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002246:	e074      	b.n	8002332 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ce      	bne.n	80021f0 <HAL_SPI_Transmit+0x11c>
 8002252:	e04c      	b.n	80022ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_SPI_Transmit+0x18e>
 800225c:	8afb      	ldrh	r3, [r7, #22]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d140      	bne.n	80022e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002288:	e02c      	b.n	80022e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d113      	bne.n	80022c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	330c      	adds	r3, #12
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80022be:	e011      	b.n	80022e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c0:	f7ff f800 	bl	80012c4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d803      	bhi.n	80022d8 <HAL_SPI_Transmit+0x204>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d102      	bne.n	80022de <HAL_SPI_Transmit+0x20a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022e2:	e026      	b.n	8002332 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1cd      	bne.n	800228a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f8b2 	bl	800245c <SPI_EndRxTxTransaction>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	77fb      	strb	r3, [r7, #31]
 800232e:	e000      	b.n	8002332 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002342:	7ffb      	ldrb	r3, [r7, #31]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800235c:	f7fe ffb2 	bl	80012c4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800236c:	f7fe ffaa 	bl	80012c4 <HAL_GetTick>
 8002370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	015b      	lsls	r3, r3, #5
 8002378:	0d1b      	lsrs	r3, r3, #20
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002382:	e054      	b.n	800242e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d050      	beq.n	800242e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800238c:	f7fe ff9a 	bl	80012c4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	429a      	cmp	r2, r3
 800239a:	d902      	bls.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13d      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ba:	d111      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c4:	d004      	beq.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d107      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e8:	d10f      	bne.n	800240a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e017      	b.n	800244e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3b01      	subs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4013      	ands	r3, r2
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	429a      	cmp	r2, r3
 800244a:	d19b      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000018 	.word	0x20000018

0800245c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2200      	movs	r2, #0
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ff6a 	bl	800234c <SPI_WaitFlagStateUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e000      	b.n	8002490 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <__errno>:
 8002498:	4b01      	ldr	r3, [pc, #4]	; (80024a0 <__errno+0x8>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000024 	.word	0x20000024

080024a4 <__libc_init_array>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	2500      	movs	r5, #0
 80024a8:	4e0c      	ldr	r6, [pc, #48]	; (80024dc <__libc_init_array+0x38>)
 80024aa:	4c0d      	ldr	r4, [pc, #52]	; (80024e0 <__libc_init_array+0x3c>)
 80024ac:	1ba4      	subs	r4, r4, r6
 80024ae:	10a4      	asrs	r4, r4, #2
 80024b0:	42a5      	cmp	r5, r4
 80024b2:	d109      	bne.n	80024c8 <__libc_init_array+0x24>
 80024b4:	f000 fc34 	bl	8002d20 <_init>
 80024b8:	2500      	movs	r5, #0
 80024ba:	4e0a      	ldr	r6, [pc, #40]	; (80024e4 <__libc_init_array+0x40>)
 80024bc:	4c0a      	ldr	r4, [pc, #40]	; (80024e8 <__libc_init_array+0x44>)
 80024be:	1ba4      	subs	r4, r4, r6
 80024c0:	10a4      	asrs	r4, r4, #2
 80024c2:	42a5      	cmp	r5, r4
 80024c4:	d105      	bne.n	80024d2 <__libc_init_array+0x2e>
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024cc:	4798      	blx	r3
 80024ce:	3501      	adds	r5, #1
 80024d0:	e7ee      	b.n	80024b0 <__libc_init_array+0xc>
 80024d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024d6:	4798      	blx	r3
 80024d8:	3501      	adds	r5, #1
 80024da:	e7f2      	b.n	80024c2 <__libc_init_array+0x1e>
 80024dc:	080048d4 	.word	0x080048d4
 80024e0:	080048d4 	.word	0x080048d4
 80024e4:	080048d4 	.word	0x080048d4
 80024e8:	080048d8 	.word	0x080048d8

080024ec <memset>:
 80024ec:	4603      	mov	r3, r0
 80024ee:	4402      	add	r2, r0
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d100      	bne.n	80024f6 <memset+0xa>
 80024f4:	4770      	bx	lr
 80024f6:	f803 1b01 	strb.w	r1, [r3], #1
 80024fa:	e7f9      	b.n	80024f0 <memset+0x4>

080024fc <_free_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4605      	mov	r5, r0
 8002500:	2900      	cmp	r1, #0
 8002502:	d043      	beq.n	800258c <_free_r+0x90>
 8002504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002508:	1f0c      	subs	r4, r1, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	18e4      	addlt	r4, r4, r3
 8002510:	f000 f8ca 	bl	80026a8 <__malloc_lock>
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <_free_r+0x94>)
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	4610      	mov	r0, r2
 800251a:	b933      	cbnz	r3, 800252a <_free_r+0x2e>
 800251c:	6063      	str	r3, [r4, #4]
 800251e:	6014      	str	r4, [r2, #0]
 8002520:	4628      	mov	r0, r5
 8002522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002526:	f000 b8c0 	b.w	80026aa <__malloc_unlock>
 800252a:	42a3      	cmp	r3, r4
 800252c:	d90b      	bls.n	8002546 <_free_r+0x4a>
 800252e:	6821      	ldr	r1, [r4, #0]
 8002530:	1862      	adds	r2, r4, r1
 8002532:	4293      	cmp	r3, r2
 8002534:	bf01      	itttt	eq
 8002536:	681a      	ldreq	r2, [r3, #0]
 8002538:	685b      	ldreq	r3, [r3, #4]
 800253a:	1852      	addeq	r2, r2, r1
 800253c:	6022      	streq	r2, [r4, #0]
 800253e:	6063      	str	r3, [r4, #4]
 8002540:	6004      	str	r4, [r0, #0]
 8002542:	e7ed      	b.n	8002520 <_free_r+0x24>
 8002544:	4613      	mov	r3, r2
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	b10a      	cbz	r2, 800254e <_free_r+0x52>
 800254a:	42a2      	cmp	r2, r4
 800254c:	d9fa      	bls.n	8002544 <_free_r+0x48>
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	1858      	adds	r0, r3, r1
 8002552:	42a0      	cmp	r0, r4
 8002554:	d10b      	bne.n	800256e <_free_r+0x72>
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	4401      	add	r1, r0
 800255a:	1858      	adds	r0, r3, r1
 800255c:	4282      	cmp	r2, r0
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	d1de      	bne.n	8002520 <_free_r+0x24>
 8002562:	6810      	ldr	r0, [r2, #0]
 8002564:	6852      	ldr	r2, [r2, #4]
 8002566:	4401      	add	r1, r0
 8002568:	6019      	str	r1, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	e7d8      	b.n	8002520 <_free_r+0x24>
 800256e:	d902      	bls.n	8002576 <_free_r+0x7a>
 8002570:	230c      	movs	r3, #12
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	e7d4      	b.n	8002520 <_free_r+0x24>
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	1821      	adds	r1, r4, r0
 800257a:	428a      	cmp	r2, r1
 800257c:	bf01      	itttt	eq
 800257e:	6811      	ldreq	r1, [r2, #0]
 8002580:	6852      	ldreq	r2, [r2, #4]
 8002582:	1809      	addeq	r1, r1, r0
 8002584:	6021      	streq	r1, [r4, #0]
 8002586:	6062      	str	r2, [r4, #4]
 8002588:	605c      	str	r4, [r3, #4]
 800258a:	e7c9      	b.n	8002520 <_free_r+0x24>
 800258c:	bd38      	pop	{r3, r4, r5, pc}
 800258e:	bf00      	nop
 8002590:	200000b0 	.word	0x200000b0

08002594 <_malloc_r>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	1ccd      	adds	r5, r1, #3
 8002598:	f025 0503 	bic.w	r5, r5, #3
 800259c:	3508      	adds	r5, #8
 800259e:	2d0c      	cmp	r5, #12
 80025a0:	bf38      	it	cc
 80025a2:	250c      	movcc	r5, #12
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	4606      	mov	r6, r0
 80025a8:	db01      	blt.n	80025ae <_malloc_r+0x1a>
 80025aa:	42a9      	cmp	r1, r5
 80025ac:	d903      	bls.n	80025b6 <_malloc_r+0x22>
 80025ae:	230c      	movs	r3, #12
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	2000      	movs	r0, #0
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
 80025b6:	f000 f877 	bl	80026a8 <__malloc_lock>
 80025ba:	4a21      	ldr	r2, [pc, #132]	; (8002640 <_malloc_r+0xac>)
 80025bc:	6814      	ldr	r4, [r2, #0]
 80025be:	4621      	mov	r1, r4
 80025c0:	b991      	cbnz	r1, 80025e8 <_malloc_r+0x54>
 80025c2:	4c20      	ldr	r4, [pc, #128]	; (8002644 <_malloc_r+0xb0>)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	b91b      	cbnz	r3, 80025d0 <_malloc_r+0x3c>
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 f83d 	bl	8002648 <_sbrk_r>
 80025ce:	6020      	str	r0, [r4, #0]
 80025d0:	4629      	mov	r1, r5
 80025d2:	4630      	mov	r0, r6
 80025d4:	f000 f838 	bl	8002648 <_sbrk_r>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d124      	bne.n	8002626 <_malloc_r+0x92>
 80025dc:	230c      	movs	r3, #12
 80025de:	4630      	mov	r0, r6
 80025e0:	6033      	str	r3, [r6, #0]
 80025e2:	f000 f862 	bl	80026aa <__malloc_unlock>
 80025e6:	e7e4      	b.n	80025b2 <_malloc_r+0x1e>
 80025e8:	680b      	ldr	r3, [r1, #0]
 80025ea:	1b5b      	subs	r3, r3, r5
 80025ec:	d418      	bmi.n	8002620 <_malloc_r+0x8c>
 80025ee:	2b0b      	cmp	r3, #11
 80025f0:	d90f      	bls.n	8002612 <_malloc_r+0x7e>
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	18cc      	adds	r4, r1, r3
 80025f6:	50cd      	str	r5, [r1, r3]
 80025f8:	4630      	mov	r0, r6
 80025fa:	f000 f856 	bl	80026aa <__malloc_unlock>
 80025fe:	f104 000b 	add.w	r0, r4, #11
 8002602:	1d23      	adds	r3, r4, #4
 8002604:	f020 0007 	bic.w	r0, r0, #7
 8002608:	1ac3      	subs	r3, r0, r3
 800260a:	d0d3      	beq.n	80025b4 <_malloc_r+0x20>
 800260c:	425a      	negs	r2, r3
 800260e:	50e2      	str	r2, [r4, r3]
 8002610:	e7d0      	b.n	80025b4 <_malloc_r+0x20>
 8002612:	684b      	ldr	r3, [r1, #4]
 8002614:	428c      	cmp	r4, r1
 8002616:	bf16      	itet	ne
 8002618:	6063      	strne	r3, [r4, #4]
 800261a:	6013      	streq	r3, [r2, #0]
 800261c:	460c      	movne	r4, r1
 800261e:	e7eb      	b.n	80025f8 <_malloc_r+0x64>
 8002620:	460c      	mov	r4, r1
 8002622:	6849      	ldr	r1, [r1, #4]
 8002624:	e7cc      	b.n	80025c0 <_malloc_r+0x2c>
 8002626:	1cc4      	adds	r4, r0, #3
 8002628:	f024 0403 	bic.w	r4, r4, #3
 800262c:	42a0      	cmp	r0, r4
 800262e:	d005      	beq.n	800263c <_malloc_r+0xa8>
 8002630:	1a21      	subs	r1, r4, r0
 8002632:	4630      	mov	r0, r6
 8002634:	f000 f808 	bl	8002648 <_sbrk_r>
 8002638:	3001      	adds	r0, #1
 800263a:	d0cf      	beq.n	80025dc <_malloc_r+0x48>
 800263c:	6025      	str	r5, [r4, #0]
 800263e:	e7db      	b.n	80025f8 <_malloc_r+0x64>
 8002640:	200000b0 	.word	0x200000b0
 8002644:	200000b4 	.word	0x200000b4

08002648 <_sbrk_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	2300      	movs	r3, #0
 800264c:	4c05      	ldr	r4, [pc, #20]	; (8002664 <_sbrk_r+0x1c>)
 800264e:	4605      	mov	r5, r0
 8002650:	4608      	mov	r0, r1
 8002652:	6023      	str	r3, [r4, #0]
 8002654:	f7fe fd7c 	bl	8001150 <_sbrk>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d102      	bne.n	8002662 <_sbrk_r+0x1a>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	b103      	cbz	r3, 8002662 <_sbrk_r+0x1a>
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	20000128 	.word	0x20000128

08002668 <siprintf>:
 8002668:	b40e      	push	{r1, r2, r3}
 800266a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800266e:	b500      	push	{lr}
 8002670:	b09c      	sub	sp, #112	; 0x70
 8002672:	ab1d      	add	r3, sp, #116	; 0x74
 8002674:	9002      	str	r0, [sp, #8]
 8002676:	9006      	str	r0, [sp, #24]
 8002678:	9107      	str	r1, [sp, #28]
 800267a:	9104      	str	r1, [sp, #16]
 800267c:	4808      	ldr	r0, [pc, #32]	; (80026a0 <siprintf+0x38>)
 800267e:	4909      	ldr	r1, [pc, #36]	; (80026a4 <siprintf+0x3c>)
 8002680:	f853 2b04 	ldr.w	r2, [r3], #4
 8002684:	9105      	str	r1, [sp, #20]
 8002686:	6800      	ldr	r0, [r0, #0]
 8002688:	a902      	add	r1, sp, #8
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	f000 f868 	bl	8002760 <_svfiprintf_r>
 8002690:	2200      	movs	r2, #0
 8002692:	9b02      	ldr	r3, [sp, #8]
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	b01c      	add	sp, #112	; 0x70
 8002698:	f85d eb04 	ldr.w	lr, [sp], #4
 800269c:	b003      	add	sp, #12
 800269e:	4770      	bx	lr
 80026a0:	20000024 	.word	0x20000024
 80026a4:	ffff0208 	.word	0xffff0208

080026a8 <__malloc_lock>:
 80026a8:	4770      	bx	lr

080026aa <__malloc_unlock>:
 80026aa:	4770      	bx	lr

080026ac <__ssputs_r>:
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	688e      	ldr	r6, [r1, #8]
 80026b2:	4682      	mov	sl, r0
 80026b4:	429e      	cmp	r6, r3
 80026b6:	460c      	mov	r4, r1
 80026b8:	4690      	mov	r8, r2
 80026ba:	4699      	mov	r9, r3
 80026bc:	d837      	bhi.n	800272e <__ssputs_r+0x82>
 80026be:	898a      	ldrh	r2, [r1, #12]
 80026c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026c4:	d031      	beq.n	800272a <__ssputs_r+0x7e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	6825      	ldr	r5, [r4, #0]
 80026ca:	6909      	ldr	r1, [r1, #16]
 80026cc:	1a6f      	subs	r7, r5, r1
 80026ce:	6965      	ldr	r5, [r4, #20]
 80026d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80026d8:	f109 0301 	add.w	r3, r9, #1
 80026dc:	443b      	add	r3, r7
 80026de:	429d      	cmp	r5, r3
 80026e0:	bf38      	it	cc
 80026e2:	461d      	movcc	r5, r3
 80026e4:	0553      	lsls	r3, r2, #21
 80026e6:	d530      	bpl.n	800274a <__ssputs_r+0x9e>
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7ff ff53 	bl	8002594 <_malloc_r>
 80026ee:	4606      	mov	r6, r0
 80026f0:	b950      	cbnz	r0, 8002708 <__ssputs_r+0x5c>
 80026f2:	230c      	movs	r3, #12
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f8ca 3000 	str.w	r3, [sl]
 80026fc:	89a3      	ldrh	r3, [r4, #12]
 80026fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002702:	81a3      	strh	r3, [r4, #12]
 8002704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002708:	463a      	mov	r2, r7
 800270a:	6921      	ldr	r1, [r4, #16]
 800270c:	f000 fab6 	bl	8002c7c <memcpy>
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271a:	81a3      	strh	r3, [r4, #12]
 800271c:	6126      	str	r6, [r4, #16]
 800271e:	443e      	add	r6, r7
 8002720:	6026      	str	r6, [r4, #0]
 8002722:	464e      	mov	r6, r9
 8002724:	6165      	str	r5, [r4, #20]
 8002726:	1bed      	subs	r5, r5, r7
 8002728:	60a5      	str	r5, [r4, #8]
 800272a:	454e      	cmp	r6, r9
 800272c:	d900      	bls.n	8002730 <__ssputs_r+0x84>
 800272e:	464e      	mov	r6, r9
 8002730:	4632      	mov	r2, r6
 8002732:	4641      	mov	r1, r8
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	f000 faac 	bl	8002c92 <memmove>
 800273a:	68a3      	ldr	r3, [r4, #8]
 800273c:	2000      	movs	r0, #0
 800273e:	1b9b      	subs	r3, r3, r6
 8002740:	60a3      	str	r3, [r4, #8]
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	441e      	add	r6, r3
 8002746:	6026      	str	r6, [r4, #0]
 8002748:	e7dc      	b.n	8002704 <__ssputs_r+0x58>
 800274a:	462a      	mov	r2, r5
 800274c:	f000 faba 	bl	8002cc4 <_realloc_r>
 8002750:	4606      	mov	r6, r0
 8002752:	2800      	cmp	r0, #0
 8002754:	d1e2      	bne.n	800271c <__ssputs_r+0x70>
 8002756:	6921      	ldr	r1, [r4, #16]
 8002758:	4650      	mov	r0, sl
 800275a:	f7ff fecf 	bl	80024fc <_free_r>
 800275e:	e7c8      	b.n	80026f2 <__ssputs_r+0x46>

08002760 <_svfiprintf_r>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	461d      	mov	r5, r3
 8002766:	898b      	ldrh	r3, [r1, #12]
 8002768:	b09d      	sub	sp, #116	; 0x74
 800276a:	061f      	lsls	r7, r3, #24
 800276c:	4680      	mov	r8, r0
 800276e:	460c      	mov	r4, r1
 8002770:	4616      	mov	r6, r2
 8002772:	d50f      	bpl.n	8002794 <_svfiprintf_r+0x34>
 8002774:	690b      	ldr	r3, [r1, #16]
 8002776:	b96b      	cbnz	r3, 8002794 <_svfiprintf_r+0x34>
 8002778:	2140      	movs	r1, #64	; 0x40
 800277a:	f7ff ff0b 	bl	8002594 <_malloc_r>
 800277e:	6020      	str	r0, [r4, #0]
 8002780:	6120      	str	r0, [r4, #16]
 8002782:	b928      	cbnz	r0, 8002790 <_svfiprintf_r+0x30>
 8002784:	230c      	movs	r3, #12
 8002786:	f8c8 3000 	str.w	r3, [r8]
 800278a:	f04f 30ff 	mov.w	r0, #4294967295
 800278e:	e0c8      	b.n	8002922 <_svfiprintf_r+0x1c2>
 8002790:	2340      	movs	r3, #64	; 0x40
 8002792:	6163      	str	r3, [r4, #20]
 8002794:	2300      	movs	r3, #0
 8002796:	9309      	str	r3, [sp, #36]	; 0x24
 8002798:	2320      	movs	r3, #32
 800279a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800279e:	2330      	movs	r3, #48	; 0x30
 80027a0:	f04f 0b01 	mov.w	fp, #1
 80027a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027a8:	9503      	str	r5, [sp, #12]
 80027aa:	4637      	mov	r7, r6
 80027ac:	463d      	mov	r5, r7
 80027ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027b2:	b10b      	cbz	r3, 80027b8 <_svfiprintf_r+0x58>
 80027b4:	2b25      	cmp	r3, #37	; 0x25
 80027b6:	d13e      	bne.n	8002836 <_svfiprintf_r+0xd6>
 80027b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80027bc:	d00b      	beq.n	80027d6 <_svfiprintf_r+0x76>
 80027be:	4653      	mov	r3, sl
 80027c0:	4632      	mov	r2, r6
 80027c2:	4621      	mov	r1, r4
 80027c4:	4640      	mov	r0, r8
 80027c6:	f7ff ff71 	bl	80026ac <__ssputs_r>
 80027ca:	3001      	adds	r0, #1
 80027cc:	f000 80a4 	beq.w	8002918 <_svfiprintf_r+0x1b8>
 80027d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d2:	4453      	add	r3, sl
 80027d4:	9309      	str	r3, [sp, #36]	; 0x24
 80027d6:	783b      	ldrb	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 809d 	beq.w	8002918 <_svfiprintf_r+0x1b8>
 80027de:	2300      	movs	r3, #0
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027e8:	9304      	str	r3, [sp, #16]
 80027ea:	9307      	str	r3, [sp, #28]
 80027ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027f0:	931a      	str	r3, [sp, #104]	; 0x68
 80027f2:	462f      	mov	r7, r5
 80027f4:	2205      	movs	r2, #5
 80027f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80027fa:	4850      	ldr	r0, [pc, #320]	; (800293c <_svfiprintf_r+0x1dc>)
 80027fc:	f000 fa30 	bl	8002c60 <memchr>
 8002800:	9b04      	ldr	r3, [sp, #16]
 8002802:	b9d0      	cbnz	r0, 800283a <_svfiprintf_r+0xda>
 8002804:	06d9      	lsls	r1, r3, #27
 8002806:	bf44      	itt	mi
 8002808:	2220      	movmi	r2, #32
 800280a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800280e:	071a      	lsls	r2, r3, #28
 8002810:	bf44      	itt	mi
 8002812:	222b      	movmi	r2, #43	; 0x2b
 8002814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002818:	782a      	ldrb	r2, [r5, #0]
 800281a:	2a2a      	cmp	r2, #42	; 0x2a
 800281c:	d015      	beq.n	800284a <_svfiprintf_r+0xea>
 800281e:	462f      	mov	r7, r5
 8002820:	2000      	movs	r0, #0
 8002822:	250a      	movs	r5, #10
 8002824:	9a07      	ldr	r2, [sp, #28]
 8002826:	4639      	mov	r1, r7
 8002828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800282c:	3b30      	subs	r3, #48	; 0x30
 800282e:	2b09      	cmp	r3, #9
 8002830:	d94d      	bls.n	80028ce <_svfiprintf_r+0x16e>
 8002832:	b1b8      	cbz	r0, 8002864 <_svfiprintf_r+0x104>
 8002834:	e00f      	b.n	8002856 <_svfiprintf_r+0xf6>
 8002836:	462f      	mov	r7, r5
 8002838:	e7b8      	b.n	80027ac <_svfiprintf_r+0x4c>
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <_svfiprintf_r+0x1dc>)
 800283c:	463d      	mov	r5, r7
 800283e:	1a80      	subs	r0, r0, r2
 8002840:	fa0b f000 	lsl.w	r0, fp, r0
 8002844:	4318      	orrs	r0, r3
 8002846:	9004      	str	r0, [sp, #16]
 8002848:	e7d3      	b.n	80027f2 <_svfiprintf_r+0x92>
 800284a:	9a03      	ldr	r2, [sp, #12]
 800284c:	1d11      	adds	r1, r2, #4
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	9103      	str	r1, [sp, #12]
 8002852:	2a00      	cmp	r2, #0
 8002854:	db01      	blt.n	800285a <_svfiprintf_r+0xfa>
 8002856:	9207      	str	r2, [sp, #28]
 8002858:	e004      	b.n	8002864 <_svfiprintf_r+0x104>
 800285a:	4252      	negs	r2, r2
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	9207      	str	r2, [sp, #28]
 8002862:	9304      	str	r3, [sp, #16]
 8002864:	783b      	ldrb	r3, [r7, #0]
 8002866:	2b2e      	cmp	r3, #46	; 0x2e
 8002868:	d10c      	bne.n	8002884 <_svfiprintf_r+0x124>
 800286a:	787b      	ldrb	r3, [r7, #1]
 800286c:	2b2a      	cmp	r3, #42	; 0x2a
 800286e:	d133      	bne.n	80028d8 <_svfiprintf_r+0x178>
 8002870:	9b03      	ldr	r3, [sp, #12]
 8002872:	3702      	adds	r7, #2
 8002874:	1d1a      	adds	r2, r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	9203      	str	r2, [sp, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	bfb8      	it	lt
 800287e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002882:	9305      	str	r3, [sp, #20]
 8002884:	4d2e      	ldr	r5, [pc, #184]	; (8002940 <_svfiprintf_r+0x1e0>)
 8002886:	2203      	movs	r2, #3
 8002888:	7839      	ldrb	r1, [r7, #0]
 800288a:	4628      	mov	r0, r5
 800288c:	f000 f9e8 	bl	8002c60 <memchr>
 8002890:	b138      	cbz	r0, 80028a2 <_svfiprintf_r+0x142>
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	1b40      	subs	r0, r0, r5
 8002896:	fa03 f000 	lsl.w	r0, r3, r0
 800289a:	9b04      	ldr	r3, [sp, #16]
 800289c:	3701      	adds	r7, #1
 800289e:	4303      	orrs	r3, r0
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	7839      	ldrb	r1, [r7, #0]
 80028a4:	2206      	movs	r2, #6
 80028a6:	4827      	ldr	r0, [pc, #156]	; (8002944 <_svfiprintf_r+0x1e4>)
 80028a8:	1c7e      	adds	r6, r7, #1
 80028aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028ae:	f000 f9d7 	bl	8002c60 <memchr>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d038      	beq.n	8002928 <_svfiprintf_r+0x1c8>
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <_svfiprintf_r+0x1e8>)
 80028b8:	bb13      	cbnz	r3, 8002900 <_svfiprintf_r+0x1a0>
 80028ba:	9b03      	ldr	r3, [sp, #12]
 80028bc:	3307      	adds	r3, #7
 80028be:	f023 0307 	bic.w	r3, r3, #7
 80028c2:	3308      	adds	r3, #8
 80028c4:	9303      	str	r3, [sp, #12]
 80028c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c8:	444b      	add	r3, r9
 80028ca:	9309      	str	r3, [sp, #36]	; 0x24
 80028cc:	e76d      	b.n	80027aa <_svfiprintf_r+0x4a>
 80028ce:	fb05 3202 	mla	r2, r5, r2, r3
 80028d2:	2001      	movs	r0, #1
 80028d4:	460f      	mov	r7, r1
 80028d6:	e7a6      	b.n	8002826 <_svfiprintf_r+0xc6>
 80028d8:	2300      	movs	r3, #0
 80028da:	250a      	movs	r5, #10
 80028dc:	4619      	mov	r1, r3
 80028de:	3701      	adds	r7, #1
 80028e0:	9305      	str	r3, [sp, #20]
 80028e2:	4638      	mov	r0, r7
 80028e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028e8:	3a30      	subs	r2, #48	; 0x30
 80028ea:	2a09      	cmp	r2, #9
 80028ec:	d903      	bls.n	80028f6 <_svfiprintf_r+0x196>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0c8      	beq.n	8002884 <_svfiprintf_r+0x124>
 80028f2:	9105      	str	r1, [sp, #20]
 80028f4:	e7c6      	b.n	8002884 <_svfiprintf_r+0x124>
 80028f6:	fb05 2101 	mla	r1, r5, r1, r2
 80028fa:	2301      	movs	r3, #1
 80028fc:	4607      	mov	r7, r0
 80028fe:	e7f0      	b.n	80028e2 <_svfiprintf_r+0x182>
 8002900:	ab03      	add	r3, sp, #12
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4622      	mov	r2, r4
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_svfiprintf_r+0x1ec>)
 8002908:	a904      	add	r1, sp, #16
 800290a:	4640      	mov	r0, r8
 800290c:	f3af 8000 	nop.w
 8002910:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002914:	4681      	mov	r9, r0
 8002916:	d1d6      	bne.n	80028c6 <_svfiprintf_r+0x166>
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	065b      	lsls	r3, r3, #25
 800291c:	f53f af35 	bmi.w	800278a <_svfiprintf_r+0x2a>
 8002920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002922:	b01d      	add	sp, #116	; 0x74
 8002924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002928:	ab03      	add	r3, sp, #12
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4622      	mov	r2, r4
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <_svfiprintf_r+0x1ec>)
 8002930:	a904      	add	r1, sp, #16
 8002932:	4640      	mov	r0, r8
 8002934:	f000 f882 	bl	8002a3c <_printf_i>
 8002938:	e7ea      	b.n	8002910 <_svfiprintf_r+0x1b0>
 800293a:	bf00      	nop
 800293c:	080048a0 	.word	0x080048a0
 8002940:	080048a6 	.word	0x080048a6
 8002944:	080048aa 	.word	0x080048aa
 8002948:	00000000 	.word	0x00000000
 800294c:	080026ad 	.word	0x080026ad

08002950 <_printf_common>:
 8002950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002954:	4691      	mov	r9, r2
 8002956:	461f      	mov	r7, r3
 8002958:	688a      	ldr	r2, [r1, #8]
 800295a:	690b      	ldr	r3, [r1, #16]
 800295c:	4606      	mov	r6, r0
 800295e:	4293      	cmp	r3, r2
 8002960:	bfb8      	it	lt
 8002962:	4613      	movlt	r3, r2
 8002964:	f8c9 3000 	str.w	r3, [r9]
 8002968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800296c:	460c      	mov	r4, r1
 800296e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002972:	b112      	cbz	r2, 800297a <_printf_common+0x2a>
 8002974:	3301      	adds	r3, #1
 8002976:	f8c9 3000 	str.w	r3, [r9]
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	0699      	lsls	r1, r3, #26
 800297e:	bf42      	ittt	mi
 8002980:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002984:	3302      	addmi	r3, #2
 8002986:	f8c9 3000 	strmi.w	r3, [r9]
 800298a:	6825      	ldr	r5, [r4, #0]
 800298c:	f015 0506 	ands.w	r5, r5, #6
 8002990:	d107      	bne.n	80029a2 <_printf_common+0x52>
 8002992:	f104 0a19 	add.w	sl, r4, #25
 8002996:	68e3      	ldr	r3, [r4, #12]
 8002998:	f8d9 2000 	ldr.w	r2, [r9]
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	42ab      	cmp	r3, r5
 80029a0:	dc29      	bgt.n	80029f6 <_printf_common+0xa6>
 80029a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	3300      	adds	r3, #0
 80029aa:	bf18      	it	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	0692      	lsls	r2, r2, #26
 80029b0:	d42e      	bmi.n	8002a10 <_printf_common+0xc0>
 80029b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029b6:	4639      	mov	r1, r7
 80029b8:	4630      	mov	r0, r6
 80029ba:	47c0      	blx	r8
 80029bc:	3001      	adds	r0, #1
 80029be:	d021      	beq.n	8002a04 <_printf_common+0xb4>
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	68e5      	ldr	r5, [r4, #12]
 80029c4:	f003 0306 	and.w	r3, r3, #6
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	bf18      	it	ne
 80029cc:	2500      	movne	r5, #0
 80029ce:	f8d9 2000 	ldr.w	r2, [r9]
 80029d2:	f04f 0900 	mov.w	r9, #0
 80029d6:	bf08      	it	eq
 80029d8:	1aad      	subeq	r5, r5, r2
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	6922      	ldr	r2, [r4, #16]
 80029de:	bf08      	it	eq
 80029e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bfc4      	itt	gt
 80029e8:	1a9b      	subgt	r3, r3, r2
 80029ea:	18ed      	addgt	r5, r5, r3
 80029ec:	341a      	adds	r4, #26
 80029ee:	454d      	cmp	r5, r9
 80029f0:	d11a      	bne.n	8002a28 <_printf_common+0xd8>
 80029f2:	2000      	movs	r0, #0
 80029f4:	e008      	b.n	8002a08 <_printf_common+0xb8>
 80029f6:	2301      	movs	r3, #1
 80029f8:	4652      	mov	r2, sl
 80029fa:	4639      	mov	r1, r7
 80029fc:	4630      	mov	r0, r6
 80029fe:	47c0      	blx	r8
 8002a00:	3001      	adds	r0, #1
 8002a02:	d103      	bne.n	8002a0c <_printf_common+0xbc>
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	e7c2      	b.n	8002996 <_printf_common+0x46>
 8002a10:	2030      	movs	r0, #48	; 0x30
 8002a12:	18e1      	adds	r1, r4, r3
 8002a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a1e:	4422      	add	r2, r4
 8002a20:	3302      	adds	r3, #2
 8002a22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a26:	e7c4      	b.n	80029b2 <_printf_common+0x62>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	4639      	mov	r1, r7
 8002a2e:	4630      	mov	r0, r6
 8002a30:	47c0      	blx	r8
 8002a32:	3001      	adds	r0, #1
 8002a34:	d0e6      	beq.n	8002a04 <_printf_common+0xb4>
 8002a36:	f109 0901 	add.w	r9, r9, #1
 8002a3a:	e7d8      	b.n	80029ee <_printf_common+0x9e>

08002a3c <_printf_i>:
 8002a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a44:	460c      	mov	r4, r1
 8002a46:	7e09      	ldrb	r1, [r1, #24]
 8002a48:	b085      	sub	sp, #20
 8002a4a:	296e      	cmp	r1, #110	; 0x6e
 8002a4c:	4617      	mov	r7, r2
 8002a4e:	4606      	mov	r6, r0
 8002a50:	4698      	mov	r8, r3
 8002a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a54:	f000 80b3 	beq.w	8002bbe <_printf_i+0x182>
 8002a58:	d822      	bhi.n	8002aa0 <_printf_i+0x64>
 8002a5a:	2963      	cmp	r1, #99	; 0x63
 8002a5c:	d036      	beq.n	8002acc <_printf_i+0x90>
 8002a5e:	d80a      	bhi.n	8002a76 <_printf_i+0x3a>
 8002a60:	2900      	cmp	r1, #0
 8002a62:	f000 80b9 	beq.w	8002bd8 <_printf_i+0x19c>
 8002a66:	2958      	cmp	r1, #88	; 0x58
 8002a68:	f000 8083 	beq.w	8002b72 <_printf_i+0x136>
 8002a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a74:	e032      	b.n	8002adc <_printf_i+0xa0>
 8002a76:	2964      	cmp	r1, #100	; 0x64
 8002a78:	d001      	beq.n	8002a7e <_printf_i+0x42>
 8002a7a:	2969      	cmp	r1, #105	; 0x69
 8002a7c:	d1f6      	bne.n	8002a6c <_printf_i+0x30>
 8002a7e:	6820      	ldr	r0, [r4, #0]
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	0605      	lsls	r5, r0, #24
 8002a84:	f103 0104 	add.w	r1, r3, #4
 8002a88:	d52a      	bpl.n	8002ae0 <_printf_i+0xa4>
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da03      	bge.n	8002a9a <_printf_i+0x5e>
 8002a92:	222d      	movs	r2, #45	; 0x2d
 8002a94:	425b      	negs	r3, r3
 8002a96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a9a:	486f      	ldr	r0, [pc, #444]	; (8002c58 <_printf_i+0x21c>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	e039      	b.n	8002b14 <_printf_i+0xd8>
 8002aa0:	2973      	cmp	r1, #115	; 0x73
 8002aa2:	f000 809d 	beq.w	8002be0 <_printf_i+0x1a4>
 8002aa6:	d808      	bhi.n	8002aba <_printf_i+0x7e>
 8002aa8:	296f      	cmp	r1, #111	; 0x6f
 8002aaa:	d020      	beq.n	8002aee <_printf_i+0xb2>
 8002aac:	2970      	cmp	r1, #112	; 0x70
 8002aae:	d1dd      	bne.n	8002a6c <_printf_i+0x30>
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	f043 0320 	orr.w	r3, r3, #32
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	e003      	b.n	8002ac2 <_printf_i+0x86>
 8002aba:	2975      	cmp	r1, #117	; 0x75
 8002abc:	d017      	beq.n	8002aee <_printf_i+0xb2>
 8002abe:	2978      	cmp	r1, #120	; 0x78
 8002ac0:	d1d4      	bne.n	8002a6c <_printf_i+0x30>
 8002ac2:	2378      	movs	r3, #120	; 0x78
 8002ac4:	4865      	ldr	r0, [pc, #404]	; (8002c5c <_printf_i+0x220>)
 8002ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002aca:	e055      	b.n	8002b78 <_printf_i+0x13c>
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad2:	1d19      	adds	r1, r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6011      	str	r1, [r2, #0]
 8002ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002adc:	2301      	movs	r3, #1
 8002ade:	e08c      	b.n	8002bfa <_printf_i+0x1be>
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ae6:	6011      	str	r1, [r2, #0]
 8002ae8:	bf18      	it	ne
 8002aea:	b21b      	sxthne	r3, r3
 8002aec:	e7cf      	b.n	8002a8e <_printf_i+0x52>
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	6825      	ldr	r5, [r4, #0]
 8002af2:	1d18      	adds	r0, r3, #4
 8002af4:	6010      	str	r0, [r2, #0]
 8002af6:	0628      	lsls	r0, r5, #24
 8002af8:	d501      	bpl.n	8002afe <_printf_i+0xc2>
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e002      	b.n	8002b04 <_printf_i+0xc8>
 8002afe:	0668      	lsls	r0, r5, #25
 8002b00:	d5fb      	bpl.n	8002afa <_printf_i+0xbe>
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	296f      	cmp	r1, #111	; 0x6f
 8002b06:	bf14      	ite	ne
 8002b08:	220a      	movne	r2, #10
 8002b0a:	2208      	moveq	r2, #8
 8002b0c:	4852      	ldr	r0, [pc, #328]	; (8002c58 <_printf_i+0x21c>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b14:	6865      	ldr	r5, [r4, #4]
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	60a5      	str	r5, [r4, #8]
 8002b1a:	f2c0 8095 	blt.w	8002c48 <_printf_i+0x20c>
 8002b1e:	6821      	ldr	r1, [r4, #0]
 8002b20:	f021 0104 	bic.w	r1, r1, #4
 8002b24:	6021      	str	r1, [r4, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13d      	bne.n	8002ba6 <_printf_i+0x16a>
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	f040 808e 	bne.w	8002c4c <_printf_i+0x210>
 8002b30:	4665      	mov	r5, ip
 8002b32:	2a08      	cmp	r2, #8
 8002b34:	d10b      	bne.n	8002b4e <_printf_i+0x112>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	07db      	lsls	r3, r3, #31
 8002b3a:	d508      	bpl.n	8002b4e <_printf_i+0x112>
 8002b3c:	6923      	ldr	r3, [r4, #16]
 8002b3e:	6862      	ldr	r2, [r4, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	bfde      	ittt	le
 8002b44:	2330      	movle	r3, #48	; 0x30
 8002b46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b4e:	ebac 0305 	sub.w	r3, ip, r5
 8002b52:	6123      	str	r3, [r4, #16]
 8002b54:	f8cd 8000 	str.w	r8, [sp]
 8002b58:	463b      	mov	r3, r7
 8002b5a:	aa03      	add	r2, sp, #12
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f7ff fef6 	bl	8002950 <_printf_common>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d14d      	bne.n	8002c04 <_printf_i+0x1c8>
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	b005      	add	sp, #20
 8002b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b72:	4839      	ldr	r0, [pc, #228]	; (8002c58 <_printf_i+0x21c>)
 8002b74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	6821      	ldr	r1, [r4, #0]
 8002b7c:	1d1d      	adds	r5, r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6015      	str	r5, [r2, #0]
 8002b82:	060a      	lsls	r2, r1, #24
 8002b84:	d50b      	bpl.n	8002b9e <_printf_i+0x162>
 8002b86:	07ca      	lsls	r2, r1, #31
 8002b88:	bf44      	itt	mi
 8002b8a:	f041 0120 	orrmi.w	r1, r1, #32
 8002b8e:	6021      	strmi	r1, [r4, #0]
 8002b90:	b91b      	cbnz	r3, 8002b9a <_printf_i+0x15e>
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	f022 0220 	bic.w	r2, r2, #32
 8002b98:	6022      	str	r2, [r4, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	e7b7      	b.n	8002b0e <_printf_i+0xd2>
 8002b9e:	064d      	lsls	r5, r1, #25
 8002ba0:	bf48      	it	mi
 8002ba2:	b29b      	uxthmi	r3, r3
 8002ba4:	e7ef      	b.n	8002b86 <_printf_i+0x14a>
 8002ba6:	4665      	mov	r5, ip
 8002ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bac:	fb02 3311 	mls	r3, r2, r1, r3
 8002bb0:	5cc3      	ldrb	r3, [r0, r3]
 8002bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	d1f5      	bne.n	8002ba8 <_printf_i+0x16c>
 8002bbc:	e7b9      	b.n	8002b32 <_printf_i+0xf6>
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	6825      	ldr	r5, [r4, #0]
 8002bc2:	1d18      	adds	r0, r3, #4
 8002bc4:	6961      	ldr	r1, [r4, #20]
 8002bc6:	6010      	str	r0, [r2, #0]
 8002bc8:	0628      	lsls	r0, r5, #24
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	d501      	bpl.n	8002bd2 <_printf_i+0x196>
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	e002      	b.n	8002bd8 <_printf_i+0x19c>
 8002bd2:	066a      	lsls	r2, r5, #25
 8002bd4:	d5fb      	bpl.n	8002bce <_printf_i+0x192>
 8002bd6:	8019      	strh	r1, [r3, #0]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4665      	mov	r5, ip
 8002bdc:	6123      	str	r3, [r4, #16]
 8002bde:	e7b9      	b.n	8002b54 <_printf_i+0x118>
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	1d19      	adds	r1, r3, #4
 8002be4:	6011      	str	r1, [r2, #0]
 8002be6:	681d      	ldr	r5, [r3, #0]
 8002be8:	6862      	ldr	r2, [r4, #4]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f837 	bl	8002c60 <memchr>
 8002bf2:	b108      	cbz	r0, 8002bf8 <_printf_i+0x1bc>
 8002bf4:	1b40      	subs	r0, r0, r5
 8002bf6:	6060      	str	r0, [r4, #4]
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	6123      	str	r3, [r4, #16]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c02:	e7a7      	b.n	8002b54 <_printf_i+0x118>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	462a      	mov	r2, r5
 8002c08:	4639      	mov	r1, r7
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	47c0      	blx	r8
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d0aa      	beq.n	8002b68 <_printf_i+0x12c>
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	079b      	lsls	r3, r3, #30
 8002c16:	d413      	bmi.n	8002c40 <_printf_i+0x204>
 8002c18:	68e0      	ldr	r0, [r4, #12]
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	bfb8      	it	lt
 8002c20:	4618      	movlt	r0, r3
 8002c22:	e7a3      	b.n	8002b6c <_printf_i+0x130>
 8002c24:	2301      	movs	r3, #1
 8002c26:	464a      	mov	r2, r9
 8002c28:	4639      	mov	r1, r7
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	47c0      	blx	r8
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d09a      	beq.n	8002b68 <_printf_i+0x12c>
 8002c32:	3501      	adds	r5, #1
 8002c34:	68e3      	ldr	r3, [r4, #12]
 8002c36:	9a03      	ldr	r2, [sp, #12]
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	42ab      	cmp	r3, r5
 8002c3c:	dcf2      	bgt.n	8002c24 <_printf_i+0x1e8>
 8002c3e:	e7eb      	b.n	8002c18 <_printf_i+0x1dc>
 8002c40:	2500      	movs	r5, #0
 8002c42:	f104 0919 	add.w	r9, r4, #25
 8002c46:	e7f5      	b.n	8002c34 <_printf_i+0x1f8>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ac      	bne.n	8002ba6 <_printf_i+0x16a>
 8002c4c:	7803      	ldrb	r3, [r0, #0]
 8002c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c56:	e76c      	b.n	8002b32 <_printf_i+0xf6>
 8002c58:	080048b1 	.word	0x080048b1
 8002c5c:	080048c2 	.word	0x080048c2

08002c60 <memchr>:
 8002c60:	b510      	push	{r4, lr}
 8002c62:	b2c9      	uxtb	r1, r1
 8002c64:	4402      	add	r2, r0
 8002c66:	4290      	cmp	r0, r2
 8002c68:	4603      	mov	r3, r0
 8002c6a:	d101      	bne.n	8002c70 <memchr+0x10>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e003      	b.n	8002c78 <memchr+0x18>
 8002c70:	781c      	ldrb	r4, [r3, #0]
 8002c72:	3001      	adds	r0, #1
 8002c74:	428c      	cmp	r4, r1
 8002c76:	d1f6      	bne.n	8002c66 <memchr+0x6>
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd10      	pop	{r4, pc}

08002c7c <memcpy>:
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	1e43      	subs	r3, r0, #1
 8002c80:	440a      	add	r2, r1
 8002c82:	4291      	cmp	r1, r2
 8002c84:	d100      	bne.n	8002c88 <memcpy+0xc>
 8002c86:	bd10      	pop	{r4, pc}
 8002c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c90:	e7f7      	b.n	8002c82 <memcpy+0x6>

08002c92 <memmove>:
 8002c92:	4288      	cmp	r0, r1
 8002c94:	b510      	push	{r4, lr}
 8002c96:	eb01 0302 	add.w	r3, r1, r2
 8002c9a:	d807      	bhi.n	8002cac <memmove+0x1a>
 8002c9c:	1e42      	subs	r2, r0, #1
 8002c9e:	4299      	cmp	r1, r3
 8002ca0:	d00a      	beq.n	8002cb8 <memmove+0x26>
 8002ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002caa:	e7f8      	b.n	8002c9e <memmove+0xc>
 8002cac:	4283      	cmp	r3, r0
 8002cae:	d9f5      	bls.n	8002c9c <memmove+0xa>
 8002cb0:	1881      	adds	r1, r0, r2
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	42d3      	cmn	r3, r2
 8002cb6:	d100      	bne.n	8002cba <memmove+0x28>
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cc2:	e7f7      	b.n	8002cb4 <memmove+0x22>

08002cc4 <_realloc_r>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	4607      	mov	r7, r0
 8002cc8:	4614      	mov	r4, r2
 8002cca:	460e      	mov	r6, r1
 8002ccc:	b921      	cbnz	r1, 8002cd8 <_realloc_r+0x14>
 8002cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	f7ff bc5e 	b.w	8002594 <_malloc_r>
 8002cd8:	b922      	cbnz	r2, 8002ce4 <_realloc_r+0x20>
 8002cda:	f7ff fc0f 	bl	80024fc <_free_r>
 8002cde:	4625      	mov	r5, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce4:	f000 f814 	bl	8002d10 <_malloc_usable_size_r>
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d20f      	bcs.n	8002d0c <_realloc_r+0x48>
 8002cec:	4621      	mov	r1, r4
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff fc50 	bl	8002594 <_malloc_r>
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d0f2      	beq.n	8002ce0 <_realloc_r+0x1c>
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	f7ff ffbd 	bl	8002c7c <memcpy>
 8002d02:	4631      	mov	r1, r6
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff fbf9 	bl	80024fc <_free_r>
 8002d0a:	e7e9      	b.n	8002ce0 <_realloc_r+0x1c>
 8002d0c:	4635      	mov	r5, r6
 8002d0e:	e7e7      	b.n	8002ce0 <_realloc_r+0x1c>

08002d10 <_malloc_usable_size_r>:
 8002d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d14:	1f18      	subs	r0, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfbc      	itt	lt
 8002d1a:	580b      	ldrlt	r3, [r1, r0]
 8002d1c:	18c0      	addlt	r0, r0, r3
 8002d1e:	4770      	bx	lr

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
