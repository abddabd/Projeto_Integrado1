
Placa_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f4  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003468  08003468  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003468  08003468  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  0800348c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800348c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066dd  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000149c  00000000  00000000  00026722  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00027bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016908  00000000  00000000  00028270  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005cc2  00000000  00000000  0003eb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008103f  00000000  00000000  0004483a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c5879  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005f0  00000000  00000000  000c58f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000195c  00000000  00000000  000c5ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800205c 	.word	0x0800205c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800205c 	.word	0x0800205c

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f001 f8ec 	bl	8001332 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f001 f8e0 	bl	8001332 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 f8d4 	bl	8001332 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 fe5a 	bl	8000e44 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 f8cc 	bl	8001332 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 f8bd 	bl	8001332 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 fd3d 	bl	8001c40 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000038 	.word	0x20000038

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 f8a3 	bl	8001332 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 fd22 	bl	8001c40 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	20000038 	.word	0x20000038

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fddd 	bl	8000e44 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	080033e0 	.word	0x080033e0
 8000340:	0800341c 	.word	0x0800341c
 8000344:	0800342c 	.word	0x0800342c

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003b0:	b082      	sub	sp, #8
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b089      	sub	sp, #36	; 0x24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	460b      	mov	r3, r1
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d6:	4413      	add	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2dc      	uxtb	r4, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003e6:	4413      	add	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4622      	mov	r2, r4
 80003f0:	f7ff ff54 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	e043      	b.n	8000482 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	3b20      	subs	r3, #32
 8000400:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000404:	fb01 f303 	mul.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	4413      	add	r3, r2
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	e029      	b.n	8000470 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00e      	beq.n	800044a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800042c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	743b      	strb	r3, [r7, #16]
 8000436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000438:	b2db      	uxtb	r3, r3
 800043a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <ST7735_WriteData>
 8000448:	e00f      	b.n	800046a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
 8000456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feb7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4293      	cmp	r3, r2
 800047a:	d3cf      	bcc.n	800041c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	3301      	adds	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000486:	461a      	mov	r2, r3
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4293      	cmp	r3, r2
 800048c:	d3b5      	bcc.n	80003fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr

0800049c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800049c:	b082      	sub	sp, #8
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af04      	add	r7, sp, #16
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	4603      	mov	r3, r0
 80004aa:	80fb      	strh	r3, [r7, #6]
 80004ac:	460b      	mov	r3, r1
 80004ae:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004b0:	f7ff fe4c 	bl	800014c <ST7735_Select>

    while(*str) {
 80004b4:	e02d      	b.n	8000512 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	7d3a      	ldrb	r2, [r7, #20]
 80004ba:	4413      	add	r3, r2
 80004bc:	2b9f      	cmp	r3, #159	; 0x9f
 80004be:	dd13      	ble.n	80004e8 <ST7735_WriteString+0x4c>
            x = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004ce:	88bb      	ldrh	r3, [r7, #4]
 80004d0:	7d7a      	ldrb	r2, [r7, #21]
 80004d2:	4413      	add	r3, r2
 80004d4:	2b4f      	cmp	r3, #79	; 0x4f
 80004d6:	dc21      	bgt.n	800051c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d103      	bne.n	80004e8 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
                continue;
 80004e6:	e014      	b.n	8000512 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	88f8      	ldrh	r0, [r7, #6]
 80004f0:	8c3b      	ldrh	r3, [r7, #32]
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	8bbb      	ldrh	r3, [r7, #28]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f7ff ff57 	bl	80003b0 <ST7735_WriteChar>
        x += font.width;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	80fb      	strh	r3, [r7, #6]
        str++;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1cd      	bne.n	80004b6 <ST7735_WriteString+0x1a>
 800051a:	e000      	b.n	800051e <ST7735_WriteString+0x82>
                break;
 800051c:	bf00      	nop
    }

    ST7735_Unselect();
 800051e:	f7ff fe21 	bl	8000164 <ST7735_Unselect>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b002      	add	sp, #8
 800052e:	4770      	bx	lr

08000530 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b9f      	cmp	r3, #159	; 0x9f
 8000552:	d859      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d856      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4413      	add	r3, r2
 8000560:	3b01      	subs	r3, #1
 8000562:	2b9f      	cmp	r3, #159	; 0x9f
 8000564:	dd03      	ble.n	800056e <ST7735_FillRectangle+0x3e>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800056c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	883b      	ldrh	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	3b01      	subs	r3, #1
 8000576:	2b4f      	cmp	r3, #79	; 0x4f
 8000578:	dd03      	ble.n	8000582 <ST7735_FillRectangle+0x52>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000580:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000582:	f7ff fde3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3b01      	subs	r3, #1
 800059c:	b2dc      	uxtb	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4622      	mov	r2, r4
 80005b0:	f7ff fe74 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b4:	8c3b      	ldrh	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	8c3b      	ldrh	r3, [r7, #32]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <ST7735_FillRectangle+0xe0>)
 80005ca:	f000 feb2 	bl	8001332 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	e013      	b.n	80005fc <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	e00a      	b.n	80005f0 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2202      	movs	r2, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <ST7735_FillRectangle+0xe4>)
 80005e6:	f001 fb2b 	bl	8001c40 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000602:	f7ff fdaf 	bl	8000164 <ST7735_Unselect>
 8000606:	e000      	b.n	800060a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000608:	bf00      	nop
}
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	20000038 	.word	0x20000038

08000618 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2350      	movs	r3, #80	; 0x50
 8000628:	22a0      	movs	r2, #160	; 0xa0
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff7f 	bl	8000530 <ST7735_FillRectangle>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <ST7735_DrawLine>:
	ST7735_WriteCommand(ST7735_GAMSET);
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b087      	sub	sp, #28
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
	    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000662:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000666:	8879      	ldrh	r1, [r7, #2]
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	bfcc      	ite	gt
 8000676:	2301      	movgt	r3, #1
 8000678:	2300      	movle	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	827b      	strh	r3, [r7, #18]
	    if (steep) {
 800067e:	8a7b      	ldrh	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <ST7735_DrawLine+0x62>
			swap = x0;
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	823b      	strh	r3, [r7, #16]
			x0 = y0;
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	80fb      	strh	r3, [r7, #6]
			y0 = swap;
 800068c:	8a3b      	ldrh	r3, [r7, #16]
 800068e:	80bb      	strh	r3, [r7, #4]

			swap = x1;
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	823b      	strh	r3, [r7, #16]
			x1 = y1;
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	807b      	strh	r3, [r7, #2]
			y1 = swap;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, y0);
	        //_swap_int16_t(x1, y1);
	    }

	    if (x0 > x1) {
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d90b      	bls.n	80006bc <ST7735_DrawLine+0x82>
			swap = x0;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	823b      	strh	r3, [r7, #16]
			x0 = x1;
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	80fb      	strh	r3, [r7, #6]
			x1 = swap;
 80006ac:	8a3b      	ldrh	r3, [r7, #16]
 80006ae:	807b      	strh	r3, [r7, #2]

			swap = y0;
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	823b      	strh	r3, [r7, #16]
			y0 = y1;
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	80bb      	strh	r3, [r7, #4]
			y1 = swap;
 80006b8:	8a3b      	ldrh	r3, [r7, #16]
 80006ba:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, x1);
	        //_swap_int16_t(y0, y1);
	    }

	    int16_t dx, dy;
	    dx = x1 - x0;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	81fb      	strh	r3, [r7, #14]
	    dy = ABS(y1 - y0);
 80006c6:	883a      	ldrh	r2, [r7, #0]
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bfb8      	it	lt
 80006d0:	425b      	neglt	r3, r3
 80006d2:	81bb      	strh	r3, [r7, #12]

	    int16_t err = dx / 2;
 80006d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	82fb      	strh	r3, [r7, #22]
	    int16_t ystep;

	    if (y0 < y1) {
 80006e0:	88ba      	ldrh	r2, [r7, #4]
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d202      	bcs.n	80006ee <ST7735_DrawLine+0xb4>
	        ystep = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	82bb      	strh	r3, [r7, #20]
 80006ec:	e028      	b.n	8000740 <ST7735_DrawLine+0x106>
	    } else {
	        ystep = -1;
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	82bb      	strh	r3, [r7, #20]
	    }

	    for (; x0<=x1; x0++) {
 80006f4:	e024      	b.n	8000740 <ST7735_DrawLine+0x106>
	        if (steep) {
 80006f6:	8a7b      	ldrh	r3, [r7, #18]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <ST7735_DrawLine+0xd0>
	            ST7735_DrawPixel(y0, x0, color);
 80006fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006fe:	88f9      	ldrh	r1, [r7, #6]
 8000700:	88bb      	ldrh	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe20 	bl	8000348 <ST7735_DrawPixel>
 8000708:	e005      	b.n	8000716 <ST7735_DrawLine+0xdc>
	        } else {
	        	ST7735_DrawPixel(x0, y0, color);
 800070a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fe19 	bl	8000348 <ST7735_DrawPixel>
	        }
	        err -= dy;
 8000716:	8afa      	ldrh	r2, [r7, #22]
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	82fb      	strh	r3, [r7, #22]
	        if (err < 0) {
 8000720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000724:	2b00      	cmp	r3, #0
 8000726:	da08      	bge.n	800073a <ST7735_DrawLine+0x100>
	            y0 += ystep;
 8000728:	8aba      	ldrh	r2, [r7, #20]
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
	            err += dx;
 8000730:	8afa      	ldrh	r2, [r7, #22]
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	4413      	add	r3, r2
 8000736:	b29b      	uxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
	    for (; x0<=x1; x0++) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d9d6      	bls.n	80006f6 <ST7735_DrawLine+0xbc>
	        }
	    }
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fb13 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f8ad 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f91f 	bl	80009a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000762:	f000 f8e5 	bl	8000930 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000766:	f7ff fdd5 	bl	8000314 <ST7735_Init>
  short Matriz[3][3];
  // desenhaQuad(3, 3, "x");
  int delay = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  ST7735_FillScreen(WHITE);
 800076e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000772:	f7ff ff51 	bl	8000618 <ST7735_FillScreen>
  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000776:	2300      	movs	r3, #0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	231d      	movs	r3, #29
 800077c:	226e      	movs	r2, #110	; 0x6e
 800077e:	211d      	movs	r1, #29
 8000780:	2032      	movs	r0, #50	; 0x32
 8000782:	f7ff ff5a 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000786:	2300      	movs	r3, #0
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2331      	movs	r3, #49	; 0x31
 800078c:	226e      	movs	r2, #110	; 0x6e
 800078e:	2131      	movs	r1, #49	; 0x31
 8000790:	2032      	movs	r0, #50	; 0x32
 8000792:	f7ff ff52 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(70, 9, 70, 69, BLACK);
 8000796:	2300      	movs	r3, #0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2345      	movs	r3, #69	; 0x45
 800079c:	2246      	movs	r2, #70	; 0x46
 800079e:	2109      	movs	r1, #9
 80007a0:	2046      	movs	r0, #70	; 0x46
 80007a2:	f7ff ff4a 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(90, 9, 90, 69, BLACK);
 80007a6:	2300      	movs	r3, #0
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2345      	movs	r3, #69	; 0x45
 80007ac:	225a      	movs	r2, #90	; 0x5a
 80007ae:	2109      	movs	r1, #9
 80007b0:	205a      	movs	r0, #90	; 0x5a
 80007b2:	f7ff ff42 	bl	800063a <ST7735_DrawLine>
  desenhaQuad(cursorX, cursorY, jogador);
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <main+0x14c>)
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	4618      	mov	r0, r3
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <main+0x150>)
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <main+0x154>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f000 f954 	bl	8000a78 <desenhaQuad>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (botEsquerda) {
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4834      	ldr	r0, [pc, #208]	; (80008a8 <main+0x158>)
 80007d6:	f000 fd95 	bl	8001304 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d119      	bne.n	8000814 <main+0xc4>
	 desenhaQuad(cursorX, cursorY, " ");
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <main+0x14c>)
 80007e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e6:	4618      	mov	r0, r3
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <main+0x150>)
 80007ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <main+0x15c>)
 80007f0:	4619      	mov	r1, r3
 80007f2:	f000 f941 	bl	8000a78 <desenhaQuad>
	 cursorParaEsquerda();
 80007f6:	f000 f9c5 	bl	8000b84 <cursorParaEsquerda>
	 desenhaQuad(cursorX, cursorY, jogador);
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <main+0x14c>)
 80007fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000800:	4618      	mov	r0, r3
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <main+0x150>)
 8000804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000808:	4619      	mov	r1, r3
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <main+0x154>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f000 f932 	bl	8000a78 <desenhaQuad>
	  }
	  if (botDireita) {
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <main+0x158>)
 800081a:	f000 fd73 	bl	8001304 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d119      	bne.n	8000858 <main+0x108>
	 desenhaQuad(cursorX, cursorY, " ");
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <main+0x14c>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	4618      	mov	r0, r3
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x150>)
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <main+0x15c>)
 8000834:	4619      	mov	r1, r3
 8000836:	f000 f91f 	bl	8000a78 <desenhaQuad>
	 cursorParaDireita();
 800083a:	f000 f96d 	bl	8000b18 <cursorParaDireita>
	 desenhaQuad(cursorX, cursorY, jogador);
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <main+0x14c>)
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	4618      	mov	r0, r3
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <main+0x150>)
 8000848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800084c:	4619      	mov	r1, r3
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <main+0x154>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	f000 f910 	bl	8000a78 <desenhaQuad>
	    	 // desenhaQuad(3, 3, "x");
	  }
	  if (botBaixo) {
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <main+0x158>)
 800085e:	f000 fd51 	bl	8001304 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1b3      	bne.n	80007d0 <main+0x80>
	    if (jogador == "x") {
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <main+0x154>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <main+0x160>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d103      	bne.n	800087a <main+0x12a>
	    	jogador = "o";
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0x154>)
 8000874:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <main+0x164>)
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e002      	b.n	8000880 <main+0x130>
	    } else {
	    	jogador = "x";
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <main+0x154>)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <main+0x160>)
 800087e:	601a      	str	r2, [r3, #0]
	    }
	  desenhaQuad(cursorX, cursorY, jogador);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <main+0x14c>)
 8000882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000886:	4618      	mov	r0, r3
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <main+0x150>)
 800088a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088e:	4619      	mov	r1, r3
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <main+0x154>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	f000 f8ef 	bl	8000a78 <desenhaQuad>
	  if (botEsquerda) {
 800089a:	e799      	b.n	80007d0 <main+0x80>
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000000a 	.word	0x2000000a
 80008a4:	2000000c 	.word	0x2000000c
 80008a8:	40010800 	.word	0x40010800
 80008ac:	08002078 	.word	0x08002078
 80008b0:	08002074 	.word	0x08002074
 80008b4:	0800207c 	.word	0x0800207c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2228      	movs	r2, #40	; 0x28
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fbc0 	bl	800204c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd38 	bl	8001364 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008fa:	f000 f979 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f000 ffa4 	bl	8001864 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000922:	f000 f965 	bl	8000bf0 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3740      	adds	r7, #64	; 0x40
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI1_Init+0x68>)
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MX_SPI1_Init+0x6c>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI1_Init+0x68>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_SPI1_Init+0x68>)
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI1_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI1_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_SPI1_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI1_Init+0x68>)
 800095e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000962:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI1_Init+0x68>)
 8000966:	2220      	movs	r2, #32
 8000968:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_SPI1_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_SPI1_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI1_Init+0x68>)
 800097e:	220a      	movs	r2, #10
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_SPI1_Init+0x68>)
 8000984:	f001 f8d8 	bl	8001b38 <HAL_SPI_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800098e:	f000 f92f 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000038 	.word	0x20000038
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0xcc>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	4821      	ldr	r0, [pc, #132]	; (8000a70 <MX_GPIO_Init+0xd0>)
 80009ea:	f000 fca2 	bl	8001332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 80009ee:	2200      	movs	r2, #0
 80009f0:	217b      	movs	r1, #123	; 0x7b
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009f4:	f000 fc9d 	bl	8001332 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 80009f8:	2310      	movs	r3, #16
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <MX_GPIO_Init+0xd0>)
 8000a10:	f000 fb1e 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000a14:	237b      	movs	r3, #123	; 0x7b
 8000a16:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2302      	movs	r3, #2
 8000a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a2c:	f000 fb10 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000a30:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <MX_GPIO_Init+0xd0>)
 8000a46:	f000 fb03 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xd0>)
 8000a60:	f000 faf6 	bl	8001050 <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <desenhaQuad>:

/* USER CODE BEGIN 4 */
void desenhaQuad (short linha, short coluna, const char* chr) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	603a      	str	r2, [r7, #0]
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	460b      	mov	r3, r1
 8000a86:	80bb      	strh	r3, [r7, #4]
	short posX = 50 + 20 * (linha - 1);
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3332      	adds	r3, #50	; 0x32
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	81fb      	strh	r3, [r7, #14]
	short posY = 9 + 20 * (coluna - 1 );
 8000aa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3309      	adds	r3, #9
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	81bb      	strh	r3, [r7, #12]
	  ST7735_WriteString(posX + DeslocX, posY + DeslocY, chr , FonteQuad, BLACK, WHITE);
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	3302      	adds	r3, #2
 8000abc:	b298      	uxth	r0, r3
 8000abe:	89bb      	ldrh	r3, [r7, #12]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <desenhaQuad+0x70>)
 8000ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aca:	9202      	str	r2, [sp, #8]
 8000acc:	2200      	movs	r2, #0
 8000ace:	9201      	str	r2, [sp, #4]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	9200      	str	r2, [sp, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	f7ff fce0 	bl	800049c <ST7735_WriteString>
	  consertaTabuleiro();
 8000adc:	f000 f806 	bl	8000aec <consertaTabuleiro>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000

08000aec <consertaTabuleiro>:
void consertaTabuleiro () {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af02      	add	r7, sp, #8
	  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000af2:	2300      	movs	r3, #0
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	231d      	movs	r3, #29
 8000af8:	226e      	movs	r2, #110	; 0x6e
 8000afa:	211d      	movs	r1, #29
 8000afc:	2032      	movs	r0, #50	; 0x32
 8000afe:	f7ff fd9c 	bl	800063a <ST7735_DrawLine>
	  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2331      	movs	r3, #49	; 0x31
 8000b08:	226e      	movs	r2, #110	; 0x6e
 8000b0a:	2131      	movs	r1, #49	; 0x31
 8000b0c:	2032      	movs	r0, #50	; 0x32
 8000b0e:	f7ff fd94 	bl	800063a <ST7735_DrawLine>
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <cursorParaDireita>:
void cursorParaDireita () {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	cursorX++;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <cursorParaDireita+0x64>)
 8000b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3301      	adds	r3, #1
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <cursorParaDireita+0x64>)
 8000b2c:	801a      	strh	r2, [r3, #0]
	if (cursorX == 4 && cursorY == 3) {
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <cursorParaDireita+0x64>)
 8000b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d10b      	bne.n	8000b50 <cursorParaDireita+0x38>
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <cursorParaDireita+0x68>)
 8000b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d106      	bne.n	8000b50 <cursorParaDireita+0x38>
		cursorX = 1;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <cursorParaDireita+0x64>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	801a      	strh	r2, [r3, #0]
		cursorY = 1;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <cursorParaDireita+0x68>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	801a      	strh	r2, [r3, #0]
	} else if (cursorX == 4) {
		cursorX = 1;
	    cursorY++;
	}
}
 8000b4e:	e010      	b.n	8000b72 <cursorParaDireita+0x5a>
	} else if (cursorX == 4) {
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <cursorParaDireita+0x64>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d10b      	bne.n	8000b72 <cursorParaDireita+0x5a>
		cursorX = 1;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <cursorParaDireita+0x64>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	801a      	strh	r2, [r3, #0]
	    cursorY++;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <cursorParaDireita+0x68>)
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <cursorParaDireita+0x68>)
 8000b70:	801a      	strh	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	2000000a 	.word	0x2000000a

08000b84 <cursorParaEsquerda>:
void cursorParaEsquerda () {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	cursorX--;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000b98:	801a      	strh	r2, [r3, #0]
	if (cursorX == 0 && cursorY == 1) {
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10b      	bne.n	8000bbc <cursorParaEsquerda+0x38>
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <cursorParaEsquerda+0x68>)
 8000ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d106      	bne.n	8000bbc <cursorParaEsquerda+0x38>
		cursorX = 3;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	801a      	strh	r2, [r3, #0]
		cursorY = 3;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <cursorParaEsquerda+0x68>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	801a      	strh	r2, [r3, #0]
	} else if (cursorX == 0) {
		cursorX = 3;
		cursorY--;
	}
}
 8000bba:	e010      	b.n	8000bde <cursorParaEsquerda+0x5a>
	} else if (cursorX == 0) {
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <cursorParaEsquerda+0x5a>
		cursorX = 3;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <cursorParaEsquerda+0x64>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	801a      	strh	r2, [r3, #0]
		cursorY--;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <cursorParaEsquerda+0x68>)
 8000bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <cursorParaEsquerda+0x68>)
 8000bdc:	801a      	strh	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	2000000a 	.word	0x2000000a

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <Error_Handler+0x6>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_SPI_MspInit+0x70>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d123      	bne.n	8000cc4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_SPI_MspInit+0x74>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_SPI_MspInit+0x78>)
 8000cc0:	f000 f9c6 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f875 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
	...

08000d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f7ff ffe4 	bl	8000d26 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f001 f951 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff fcf5 	bl	8000750 <main>
  bx lr
 8000d66:	4770      	bx	lr
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d70:	08003470 	.word	0x08003470
  ldr r2, =_sbss
 8000d74:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d78:	20000094 	.word	0x20000094

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x28>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f929 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff ff2c 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f933 	bl	8001036 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f909 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000010 	.word	0x20000010
 8000e04:	20000018 	.word	0x20000018
 8000e08:	20000014 	.word	0x20000014

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000018 	.word	0x20000018
 8000e2c:	20000090 	.word	0x20000090

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000090 	.word	0x20000090

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_Delay+0x40>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000018 	.word	0x20000018

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff90 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff49 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff90 	bl	8000f40 <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5f 	bl	8000eec <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb0 	bl	8000fa4 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e127      	b.n	80012b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001064:	2201      	movs	r2, #1
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8116 	bne.w	80012ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b12      	cmp	r3, #18
 8001088:	d034      	beq.n	80010f4 <HAL_GPIO_Init+0xa4>
 800108a:	2b12      	cmp	r3, #18
 800108c:	d80d      	bhi.n	80010aa <HAL_GPIO_Init+0x5a>
 800108e:	2b02      	cmp	r3, #2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x9a>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d804      	bhi.n	80010a0 <HAL_GPIO_Init+0x50>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d031      	beq.n	80010fe <HAL_GPIO_Init+0xae>
 800109a:	2b01      	cmp	r3, #1
 800109c:	d01c      	beq.n	80010d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800109e:	e048      	b.n	8001132 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d043      	beq.n	800112c <HAL_GPIO_Init+0xdc>
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	d01b      	beq.n	80010e0 <HAL_GPIO_Init+0x90>
          break;
 80010a8:	e043      	b.n	8001132 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010aa:	4a89      	ldr	r2, [pc, #548]	; (80012d0 <HAL_GPIO_Init+0x280>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d026      	beq.n	80010fe <HAL_GPIO_Init+0xae>
 80010b0:	4a87      	ldr	r2, [pc, #540]	; (80012d0 <HAL_GPIO_Init+0x280>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d806      	bhi.n	80010c4 <HAL_GPIO_Init+0x74>
 80010b6:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_GPIO_Init+0x284>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d020      	beq.n	80010fe <HAL_GPIO_Init+0xae>
 80010bc:	4a86      	ldr	r2, [pc, #536]	; (80012d8 <HAL_GPIO_Init+0x288>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01d      	beq.n	80010fe <HAL_GPIO_Init+0xae>
          break;
 80010c2:	e036      	b.n	8001132 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c4:	4a85      	ldr	r2, [pc, #532]	; (80012dc <HAL_GPIO_Init+0x28c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0xae>
 80010ca:	4a85      	ldr	r2, [pc, #532]	; (80012e0 <HAL_GPIO_Init+0x290>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d016      	beq.n	80010fe <HAL_GPIO_Init+0xae>
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <HAL_GPIO_Init+0x294>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0xae>
          break;
 80010d6:	e02c      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e028      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	3304      	adds	r3, #4
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e023      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	3308      	adds	r3, #8
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e01e      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	330c      	adds	r3, #12
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e019      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001106:	2304      	movs	r3, #4
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e012      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	611a      	str	r2, [r3, #16]
          break;
 800111e:	e008      	b.n	8001132 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	615a      	str	r2, [r3, #20]
          break;
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2bff      	cmp	r3, #255	; 0xff
 8001136:	d801      	bhi.n	800113c <HAL_GPIO_Init+0xec>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	e001      	b.n	8001140 <HAL_GPIO_Init+0xf0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2bff      	cmp	r3, #255	; 0xff
 8001146:	d802      	bhi.n	800114e <HAL_GPIO_Init+0xfe>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x104>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3b08      	subs	r3, #8
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	210f      	movs	r1, #15
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	6a39      	ldr	r1, [r7, #32]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8096 	beq.w	80012ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_GPIO_Init+0x298>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_GPIO_Init+0x298>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x298>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119a:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x29c>)
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_GPIO_Init+0x2a0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x19e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_GPIO_Init+0x2a4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x19a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a49      	ldr	r2, [pc, #292]	; (80012f8 <HAL_GPIO_Init+0x2a8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x196>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a48      	ldr	r2, [pc, #288]	; (80012fc <HAL_GPIO_Init+0x2ac>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x192>
 80011de:	2303      	movs	r3, #3
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x1a0>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x1a0>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x1a0>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x1a0>
 80011ee:	2300      	movs	r3, #0
 80011f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001200:	493a      	ldr	r1, [pc, #232]	; (80012ec <HAL_GPIO_Init+0x29c>)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4938      	ldr	r1, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4933      	ldr	r1, [pc, #204]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001232:	4013      	ands	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	492e      	ldr	r1, [pc, #184]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 800125a:	4013      	ands	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	4924      	ldr	r1, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	43db      	mvns	r3, r3
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001282:	4013      	ands	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	491a      	ldr	r1, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	60cb      	str	r3, [r1, #12]
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4915      	ldr	r1, [pc, #84]	; (8001300 <HAL_GPIO_Init+0x2b0>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f47f aed0 	bne.w	8001064 <HAL_GPIO_Init+0x14>
  }
}
 80012c4:	bf00      	nop
 80012c6:	372c      	adds	r7, #44	; 0x2c
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10110000 	.word	0x10110000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10310000 	.word	0x10310000
 80012e0:	10320000 	.word	0x10320000
 80012e4:	10220000 	.word	0x10220000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	40011000 	.word	0x40011000
 80012fc:	40011400 	.word	0x40011400
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001342:	787b      	ldrb	r3, [r7, #1]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800134e:	e003      	b.n	8001358 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e26c      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001390:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
 800139c:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <HAL_RCC_OscConfig+0x12c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d168      	bne.n	8001490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e246      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x76>
 80013cc:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0xbc>
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fcf6 	bl	8000e30 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fcf2 	bl	8000e30 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1fa      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xe4>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fce2 	bl	8000e30 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcde 	bl	8000e30 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1e6      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x10c>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1ba      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc97 	bl	8000e30 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fc93 	bl	8000e30 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e19b      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4927      	ldr	r1, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc76 	bl	8000e30 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fc72 	bl	8000e30 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d019      	beq.n	80015ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fc56 	bl	8000e30 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fc52 	bl	8000e30 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e15a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 faa8 	bl	8001afc <RCC_Delay>
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fc3c 	bl	8000e30 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc38 	bl	8000e30 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d908      	bls.n	80015dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e140      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420000 	.word	0x42420000
 80015d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e9      	bne.n	80015bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a6 	beq.w	8001742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a93      	ldr	r2, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b91      	ldr	r3, [pc, #580]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a8a      	ldr	r2, [pc, #552]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fbf9 	bl	8000e30 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff fbf5 	bl	8000e30 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0fd      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x312>
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a7a      	ldr	r2, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e02d      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x334>
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b73      	ldr	r3, [pc, #460]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a72      	ldr	r2, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e01c      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x356>
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 80016ba:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a63      	ldr	r2, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fba9 	bl	8000e30 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fba5 	bl	8000e30 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0ab      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCC_OscConfig+0x37e>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb93 	bl	8000e30 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff fb8f 	bl	8000e30 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e095      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8081 	beq.w	800184e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	4b42      	ldr	r3, [pc, #264]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d061      	beq.n	800181c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d146      	bne.n	80017ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb63 	bl	8000e30 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb5f 	bl	8000e30 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e067      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	492d      	ldr	r1, [pc, #180]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a19      	ldr	r1, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	430b      	orrs	r3, r1
 80017ba:	4927      	ldr	r1, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb33 	bl	8000e30 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb2f 	bl	8000e30 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e037      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x46a>
 80017ec:	e02f      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb1c 	bl	8000e30 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb18 	bl	8000e30 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e020      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x498>
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
 8001860:	42420060 	.word	0x42420060

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa6c 	bl	8000e30 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa68 	bl	8000e30 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4601      	mov	r1, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	fa21 f303 	lsr.w	r3, r1, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f9ca 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08003458 	.word	0x08003458
 8001a30:	20000010 	.word	0x20000010
 8001a34:	20000014 	.word	0x20000014

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a40:	1d3c      	adds	r4, r7, #4
 8001a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x40>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x46>
 8001a76:	e02d      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a7a:	623b      	str	r3, [r7, #32]
      break;
 8001a7c:	e02d      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0c5b      	lsrs	r3, r3, #17
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aaa:	4413      	add	r3, r2
 8001aac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ab0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab6:	fb02 f203 	mul.w	r2, r2, r3
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e004      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	623b      	str	r3, [r7, #32]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad6:	623b      	str	r3, [r7, #32]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc90      	pop	{r4, r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	08002080 	.word	0x08002080
 8001aec:	08002090 	.word	0x08002090
 8001af0:	40021000 	.word	0x40021000
 8001af4:	007a1200 	.word	0x007a1200
 8001af8:	003d0900 	.word	0x003d0900

08001afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <RCC_Delay+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <RCC_Delay+0x38>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a5b      	lsrs	r3, r3, #9
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b18:	bf00      	nop
  }
  while (Delay --);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <RCC_Delay+0x1c>
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000010 	.word	0x20000010
 8001b34:	10624dd3 	.word	0x10624dd3

08001b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e076      	b.n	8001c38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b5a:	d009      	beq.n	8001b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	e005      	b.n	8001b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff f866 	bl	8000c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	ea42 0103 	orr.w	r1, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	0c1a      	lsrs	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 0204 	and.w	r2, r2, #4
 8001c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_SPI_Transmit+0x22>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e126      	b.n	8001eb0 <HAL_SPI_Transmit+0x270>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c6a:	f7ff f8e1 	bl	8000e30 <HAL_GetTick>
 8001c6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d002      	beq.n	8001c86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c84:	e10b      	b.n	8001e9e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_SPI_Transmit+0x52>
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c96:	e102      	b.n	8001e9e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d10f      	bne.n	8001d00 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d007      	beq.n	8001d1e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d26:	d14b      	bne.n	8001dc0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_SPI_Transmit+0xf6>
 8001d30:	8afb      	ldrh	r3, [r7, #22]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d13e      	bne.n	8001db4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	1c9a      	adds	r2, r3, #2
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d5a:	e02b      	b.n	8001db4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d112      	bne.n	8001d90 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	1c9a      	adds	r2, r3, #2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d8e:	e011      	b.n	8001db4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d90:	f7ff f84e 	bl	8000e30 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d803      	bhi.n	8001da8 <HAL_SPI_Transmit+0x168>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d102      	bne.n	8001dae <HAL_SPI_Transmit+0x16e>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001db2:	e074      	b.n	8001e9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ce      	bne.n	8001d5c <HAL_SPI_Transmit+0x11c>
 8001dbe:	e04c      	b.n	8001e5a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_SPI_Transmit+0x18e>
 8001dc8:	8afb      	ldrh	r3, [r7, #22]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d140      	bne.n	8001e50 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	330c      	adds	r3, #12
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001df4:	e02c      	b.n	8001e50 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d113      	bne.n	8001e2c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e2a:	e011      	b.n	8001e50 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e2c:	f7ff f800 	bl	8000e30 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d803      	bhi.n	8001e44 <HAL_SPI_Transmit+0x204>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e42:	d102      	bne.n	8001e4a <HAL_SPI_Transmit+0x20a>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e4e:	e026      	b.n	8001e9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1cd      	bne.n	8001df6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8b2 	bl	8001fc8 <SPI_EndRxTxTransaction>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
 8001e9a:	e000      	b.n	8001e9e <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ec8:	f7fe ffb2 	bl	8000e30 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ed8:	f7fe ffaa 	bl	8000e30 <HAL_GetTick>
 8001edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	015b      	lsls	r3, r3, #5
 8001ee4:	0d1b      	lsrs	r3, r3, #20
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eee:	e054      	b.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d050      	beq.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ef8:	f7fe ff9a 	bl	8000e30 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d902      	bls.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d13d      	bne.n	8001f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f26:	d111      	bne.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f30:	d004      	beq.n	8001f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d107      	bne.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	d10f      	bne.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e017      	b.n	8001fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d19b      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000010 	.word	0x20000010

08001fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff ff6a 	bl	8001eb8 <SPI_WaitFlagStateUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e000      	b.n	8001ffc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	2500      	movs	r5, #0
 8002008:	4e0c      	ldr	r6, [pc, #48]	; (800203c <__libc_init_array+0x38>)
 800200a:	4c0d      	ldr	r4, [pc, #52]	; (8002040 <__libc_init_array+0x3c>)
 800200c:	1ba4      	subs	r4, r4, r6
 800200e:	10a4      	asrs	r4, r4, #2
 8002010:	42a5      	cmp	r5, r4
 8002012:	d109      	bne.n	8002028 <__libc_init_array+0x24>
 8002014:	f000 f822 	bl	800205c <_init>
 8002018:	2500      	movs	r5, #0
 800201a:	4e0a      	ldr	r6, [pc, #40]	; (8002044 <__libc_init_array+0x40>)
 800201c:	4c0a      	ldr	r4, [pc, #40]	; (8002048 <__libc_init_array+0x44>)
 800201e:	1ba4      	subs	r4, r4, r6
 8002020:	10a4      	asrs	r4, r4, #2
 8002022:	42a5      	cmp	r5, r4
 8002024:	d105      	bne.n	8002032 <__libc_init_array+0x2e>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800202c:	4798      	blx	r3
 800202e:	3501      	adds	r5, #1
 8002030:	e7ee      	b.n	8002010 <__libc_init_array+0xc>
 8002032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002036:	4798      	blx	r3
 8002038:	3501      	adds	r5, #1
 800203a:	e7f2      	b.n	8002022 <__libc_init_array+0x1e>
 800203c:	08003468 	.word	0x08003468
 8002040:	08003468 	.word	0x08003468
 8002044:	08003468 	.word	0x08003468
 8002048:	0800346c 	.word	0x0800346c

0800204c <memset>:
 800204c:	4603      	mov	r3, r0
 800204e:	4402      	add	r2, r0
 8002050:	4293      	cmp	r3, r2
 8002052:	d100      	bne.n	8002056 <memset+0xa>
 8002054:	4770      	bx	lr
 8002056:	f803 1b01 	strb.w	r1, [r3], #1
 800205a:	e7f9      	b.n	8002050 <memset+0x4>

0800205c <_init>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	bf00      	nop
 8002060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002062:	bc08      	pop	{r3}
 8002064:	469e      	mov	lr, r3
 8002066:	4770      	bx	lr

08002068 <_fini>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr
