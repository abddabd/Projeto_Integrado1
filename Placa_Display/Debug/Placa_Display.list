
Placa_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002154  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080043ac  080043ac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043ac  080043ac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080043b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000024  080043d8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080043d8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006727  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001487  00000000  00000000  00026774  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00027c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016908  00000000  00000000  000282d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005d7d  00000000  00000000  0003ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008106e  00000000  00000000  00044955  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c59c3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000610  00000000  00000000  000c5a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000019e4  00000000  00000000  000c6050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002240 	.word	0x08002240

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002240 	.word	0x08002240

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f001 f9de 	bl	8001516 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f001 f9d2 	bl	8001516 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 f9c6 	bl	8001516 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 ff4c 	bl	8001028 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 f9be 	bl	8001516 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 f9af 	bl	8001516 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 fe2f 	bl	8001e24 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000040 	.word	0x20000040

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 f995 	bl	8001516 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 fe14 	bl	8001e24 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	20000040 	.word	0x20000040

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fecf 	bl	8001028 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08004324 	.word	0x08004324
 8000340:	08004360 	.word	0x08004360
 8000344:	08004370 	.word	0x08004370

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003b0:	b082      	sub	sp, #8
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b089      	sub	sp, #36	; 0x24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	460b      	mov	r3, r1
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d6:	4413      	add	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2dc      	uxtb	r4, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003e6:	4413      	add	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4622      	mov	r2, r4
 80003f0:	f7ff ff54 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	e043      	b.n	8000482 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	3b20      	subs	r3, #32
 8000400:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000404:	fb01 f303 	mul.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	4413      	add	r3, r2
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	e029      	b.n	8000470 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00e      	beq.n	800044a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800042c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	743b      	strb	r3, [r7, #16]
 8000436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000438:	b2db      	uxtb	r3, r3
 800043a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <ST7735_WriteData>
 8000448:	e00f      	b.n	800046a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
 8000456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feb7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4293      	cmp	r3, r2
 800047a:	d3cf      	bcc.n	800041c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	3301      	adds	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000486:	461a      	mov	r2, r3
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4293      	cmp	r3, r2
 800048c:	d3b5      	bcc.n	80003fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr

0800049c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800049c:	b082      	sub	sp, #8
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af04      	add	r7, sp, #16
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	4603      	mov	r3, r0
 80004aa:	80fb      	strh	r3, [r7, #6]
 80004ac:	460b      	mov	r3, r1
 80004ae:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004b0:	f7ff fe4c 	bl	800014c <ST7735_Select>

    while(*str) {
 80004b4:	e02d      	b.n	8000512 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	7d3a      	ldrb	r2, [r7, #20]
 80004ba:	4413      	add	r3, r2
 80004bc:	2b9f      	cmp	r3, #159	; 0x9f
 80004be:	dd13      	ble.n	80004e8 <ST7735_WriteString+0x4c>
            x = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004ce:	88bb      	ldrh	r3, [r7, #4]
 80004d0:	7d7a      	ldrb	r2, [r7, #21]
 80004d2:	4413      	add	r3, r2
 80004d4:	2b4f      	cmp	r3, #79	; 0x4f
 80004d6:	dc21      	bgt.n	800051c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d103      	bne.n	80004e8 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
                continue;
 80004e6:	e014      	b.n	8000512 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	88f8      	ldrh	r0, [r7, #6]
 80004f0:	8c3b      	ldrh	r3, [r7, #32]
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	8bbb      	ldrh	r3, [r7, #28]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f7ff ff57 	bl	80003b0 <ST7735_WriteChar>
        x += font.width;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	80fb      	strh	r3, [r7, #6]
        str++;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1cd      	bne.n	80004b6 <ST7735_WriteString+0x1a>
 800051a:	e000      	b.n	800051e <ST7735_WriteString+0x82>
                break;
 800051c:	bf00      	nop
    }

    ST7735_Unselect();
 800051e:	f7ff fe21 	bl	8000164 <ST7735_Unselect>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b002      	add	sp, #8
 800052e:	4770      	bx	lr

08000530 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b9f      	cmp	r3, #159	; 0x9f
 8000552:	d859      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d856      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4413      	add	r3, r2
 8000560:	3b01      	subs	r3, #1
 8000562:	2b9f      	cmp	r3, #159	; 0x9f
 8000564:	dd03      	ble.n	800056e <ST7735_FillRectangle+0x3e>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800056c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	883b      	ldrh	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	3b01      	subs	r3, #1
 8000576:	2b4f      	cmp	r3, #79	; 0x4f
 8000578:	dd03      	ble.n	8000582 <ST7735_FillRectangle+0x52>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000580:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000582:	f7ff fde3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3b01      	subs	r3, #1
 800059c:	b2dc      	uxtb	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4622      	mov	r2, r4
 80005b0:	f7ff fe74 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b4:	8c3b      	ldrh	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	8c3b      	ldrh	r3, [r7, #32]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <ST7735_FillRectangle+0xe0>)
 80005ca:	f000 ffa4 	bl	8001516 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	e013      	b.n	80005fc <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	e00a      	b.n	80005f0 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2202      	movs	r2, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <ST7735_FillRectangle+0xe4>)
 80005e6:	f001 fc1d 	bl	8001e24 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000602:	f7ff fdaf 	bl	8000164 <ST7735_Unselect>
 8000606:	e000      	b.n	800060a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000608:	bf00      	nop
}
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	20000040 	.word	0x20000040

08000618 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2350      	movs	r3, #80	; 0x50
 8000628:	22a0      	movs	r2, #160	; 0xa0
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff7f 	bl	8000530 <ST7735_FillRectangle>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <ST7735_DrawLine>:
	ST7735_WriteCommand(ST7735_GAMSET);
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b087      	sub	sp, #28
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
	    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000662:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000666:	8879      	ldrh	r1, [r7, #2]
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	bfcc      	ite	gt
 8000676:	2301      	movgt	r3, #1
 8000678:	2300      	movle	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	827b      	strh	r3, [r7, #18]
	    if (steep) {
 800067e:	8a7b      	ldrh	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <ST7735_DrawLine+0x62>
			swap = x0;
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	823b      	strh	r3, [r7, #16]
			x0 = y0;
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	80fb      	strh	r3, [r7, #6]
			y0 = swap;
 800068c:	8a3b      	ldrh	r3, [r7, #16]
 800068e:	80bb      	strh	r3, [r7, #4]

			swap = x1;
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	823b      	strh	r3, [r7, #16]
			x1 = y1;
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	807b      	strh	r3, [r7, #2]
			y1 = swap;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, y0);
	        //_swap_int16_t(x1, y1);
	    }

	    if (x0 > x1) {
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d90b      	bls.n	80006bc <ST7735_DrawLine+0x82>
			swap = x0;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	823b      	strh	r3, [r7, #16]
			x0 = x1;
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	80fb      	strh	r3, [r7, #6]
			x1 = swap;
 80006ac:	8a3b      	ldrh	r3, [r7, #16]
 80006ae:	807b      	strh	r3, [r7, #2]

			swap = y0;
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	823b      	strh	r3, [r7, #16]
			y0 = y1;
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	80bb      	strh	r3, [r7, #4]
			y1 = swap;
 80006b8:	8a3b      	ldrh	r3, [r7, #16]
 80006ba:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, x1);
	        //_swap_int16_t(y0, y1);
	    }

	    int16_t dx, dy;
	    dx = x1 - x0;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	81fb      	strh	r3, [r7, #14]
	    dy = ABS(y1 - y0);
 80006c6:	883a      	ldrh	r2, [r7, #0]
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bfb8      	it	lt
 80006d0:	425b      	neglt	r3, r3
 80006d2:	81bb      	strh	r3, [r7, #12]

	    int16_t err = dx / 2;
 80006d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	82fb      	strh	r3, [r7, #22]
	    int16_t ystep;

	    if (y0 < y1) {
 80006e0:	88ba      	ldrh	r2, [r7, #4]
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d202      	bcs.n	80006ee <ST7735_DrawLine+0xb4>
	        ystep = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	82bb      	strh	r3, [r7, #20]
 80006ec:	e028      	b.n	8000740 <ST7735_DrawLine+0x106>
	    } else {
	        ystep = -1;
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	82bb      	strh	r3, [r7, #20]
	    }

	    for (; x0<=x1; x0++) {
 80006f4:	e024      	b.n	8000740 <ST7735_DrawLine+0x106>
	        if (steep) {
 80006f6:	8a7b      	ldrh	r3, [r7, #18]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <ST7735_DrawLine+0xd0>
	            ST7735_DrawPixel(y0, x0, color);
 80006fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006fe:	88f9      	ldrh	r1, [r7, #6]
 8000700:	88bb      	ldrh	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe20 	bl	8000348 <ST7735_DrawPixel>
 8000708:	e005      	b.n	8000716 <ST7735_DrawLine+0xdc>
	        } else {
	        	ST7735_DrawPixel(x0, y0, color);
 800070a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fe19 	bl	8000348 <ST7735_DrawPixel>
	        }
	        err -= dy;
 8000716:	8afa      	ldrh	r2, [r7, #22]
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	82fb      	strh	r3, [r7, #22]
	        if (err < 0) {
 8000720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000724:	2b00      	cmp	r3, #0
 8000726:	da08      	bge.n	800073a <ST7735_DrawLine+0x100>
	            y0 += ystep;
 8000728:	8aba      	ldrh	r2, [r7, #20]
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
	            err += dx;
 8000730:	8afa      	ldrh	r2, [r7, #22]
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	4413      	add	r3, r2
 8000736:	b29b      	uxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
	    for (; x0<=x1; x0++) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d9d6      	bls.n	80006f6 <ST7735_DrawLine+0xbc>
	        }
	    }
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc05 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f871 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f8e9 	bl	8000934 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000762:	f000 f8af 	bl	80008c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000766:	f7ff fdd5 	bl	8000314 <ST7735_Init>
  ST7735_FillScreen(WHITE);
 800076a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800076e:	f7ff ff53 	bl	8000618 <ST7735_FillScreen>
  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000772:	2300      	movs	r3, #0
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	231d      	movs	r3, #29
 8000778:	226e      	movs	r2, #110	; 0x6e
 800077a:	211d      	movs	r1, #29
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f7ff ff5c 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2331      	movs	r3, #49	; 0x31
 8000788:	226e      	movs	r2, #110	; 0x6e
 800078a:	2131      	movs	r1, #49	; 0x31
 800078c:	2032      	movs	r0, #50	; 0x32
 800078e:	f7ff ff54 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(70, 9, 70, 69, BLACK);
 8000792:	2300      	movs	r3, #0
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2345      	movs	r3, #69	; 0x45
 8000798:	2246      	movs	r2, #70	; 0x46
 800079a:	2109      	movs	r1, #9
 800079c:	2046      	movs	r0, #70	; 0x46
 800079e:	f7ff ff4c 	bl	800063a <ST7735_DrawLine>
  ST7735_DrawLine(90, 9, 90, 69, BLACK);
 80007a2:	2300      	movs	r3, #0
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2345      	movs	r3, #69	; 0x45
 80007a8:	225a      	movs	r2, #90	; 0x5a
 80007aa:	2109      	movs	r1, #9
 80007ac:	205a      	movs	r0, #90	; 0x5a
 80007ae:	f7ff ff44 	bl	800063a <ST7735_DrawLine>
  ST7735_WriteString(0, 0, "x:" , Font_11x18, BLACK, WHITE);
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <main+0xe4>)
 80007b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b8:	9202      	str	r2, [sp, #8]
 80007ba:	2200      	movs	r2, #0
 80007bc:	9201      	str	r2, [sp, #4]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	9200      	str	r2, [sp, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <main+0xe8>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fe67 	bl	800049c <ST7735_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  piscaCursor();
 80007ce:	f000 fa1d 	bl	8000c0c <piscaCursor>
	  if (botEsquerda) {
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4819      	ldr	r0, [pc, #100]	; (800083c <main+0xec>)
 80007d8:	f000 fe86 	bl	80014e8 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <main+0x96>
	 cursorParaEsquerda();
 80007e2:	f000 f9b1 	bl	8000b48 <cursorParaEsquerda>
	  }

	  if (botDireita) {
 80007e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <main+0xec>)
 80007ec:	f000 fe7c 	bl	80014e8 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <main+0xaa>
	  cursorParaDireita();
 80007f6:	f000 f94d 	bl	8000a94 <cursorParaDireita>
	  }

	  if (botBaixo) {
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <main+0xec>)
 8000800:	f000 fe72 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d104      	bne.n	8000814 <main+0xc4>
	  alternaJogador();
 800080a:	f000 f9e7 	bl	8000bdc <alternaJogador>
	  HAL_Delay(200);
 800080e:	20c8      	movs	r0, #200	; 0xc8
 8000810:	f000 fc0a 	bl	8001028 <HAL_Delay>
	  }

	  if (botCima) {
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <main+0xec>)
 800081a:	f000 fe65 	bl	80014e8 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1d4      	bne.n	80007ce <main+0x7e>
	  fimJogada();
 8000824:	f000 fa82 	bl	8000d2c <fimJogada>
	  HAL_Delay(300);
 8000828:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800082c:	f000 fbfc 	bl	8001028 <HAL_Delay>
	  piscaCursor();
 8000830:	e7cd      	b.n	80007ce <main+0x7e>
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000
 8000838:	0800225c 	.word	0x0800225c
 800083c:	40010800 	.word	0x40010800

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b090      	sub	sp, #64	; 0x40
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fcee 	bl	8002230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000876:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fe61 	bl	8001548 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800088c:	f000 faa2 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2102      	movs	r1, #2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f8cc 	bl	8001a48 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008b6:	f000 fa8d 	bl	8000dd4 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3740      	adds	r7, #64	; 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_SPI1_Init+0x68>)
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <MX_SPI1_Init+0x6c>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_SPI1_Init+0x68>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_SPI1_Init+0x68>)
 80008d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_SPI1_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI1_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_SPI1_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI1_Init+0x68>)
 80008f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI1_Init+0x68>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_SPI1_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_SPI1_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI1_Init+0x68>)
 8000912:	220a      	movs	r2, #10
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_SPI1_Init+0x68>)
 8000918:	f001 fa00 	bl	8001d1c <HAL_SPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000922:	f000 fa57 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000040 	.word	0x20000040
 8000930:	40013000 	.word	0x40013000

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_GPIO_Init+0xb4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <MX_GPIO_Init+0xb4>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0xb4>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xb4>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <MX_GPIO_Init+0xb4>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_GPIO_Init+0xb4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2110      	movs	r1, #16
 800097c:	481b      	ldr	r0, [pc, #108]	; (80009ec <MX_GPIO_Init+0xb8>)
 800097e:	f000 fdca 	bl	8001516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000982:	2200      	movs	r2, #0
 8000984:	217b      	movs	r1, #123	; 0x7b
 8000986:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xbc>)
 8000988:	f000 fdc5 	bl	8001516 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 800098c:	2310      	movs	r3, #16
 800098e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4619      	mov	r1, r3
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_GPIO_Init+0xb8>)
 80009a4:	f000 fc46 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 80009a8:	237b      	movs	r3, #123	; 0x7b
 80009aa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xbc>)
 80009c0:	f000 fc38 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009c4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0xb8>)
 80009da:	f000 fc2b 	bl	8001234 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <desenhaQuad>:

/* USER CODE BEGIN 4 */
void desenhaQuad (short linha, short coluna, const char* chr) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af04      	add	r7, sp, #16
 80009fa:	4603      	mov	r3, r0
 80009fc:	603a      	str	r2, [r7, #0]
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	460b      	mov	r3, r1
 8000a02:	80bb      	strh	r3, [r7, #4]
	short posX = 50 + 20 * (linha - 1);
 8000a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3332      	adds	r3, #50	; 0x32
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	81fb      	strh	r3, [r7, #14]
	short posY = 9 + 20 * (coluna - 1 );
 8000a1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	3309      	adds	r3, #9
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	81bb      	strh	r3, [r7, #12]
	  ST7735_WriteString(posX + DeslocX, posY + DeslocY, chr , FonteQuad, BLACK, WHITE);
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	3302      	adds	r3, #2
 8000a38:	b298      	uxth	r0, r3
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <desenhaQuad+0x70>)
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	9202      	str	r2, [sp, #8]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	9201      	str	r2, [sp, #4]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	f7ff fd22 	bl	800049c <ST7735_WriteString>
	  consertaTabuleiro();
 8000a58:	f000 f806 	bl	8000a68 <consertaTabuleiro>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008

08000a68 <consertaTabuleiro>:
void consertaTabuleiro () {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af02      	add	r7, sp, #8
	  ST7735_DrawLine(50, 29, 110, 29, BLACK);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	231d      	movs	r3, #29
 8000a74:	226e      	movs	r2, #110	; 0x6e
 8000a76:	211d      	movs	r1, #29
 8000a78:	2032      	movs	r0, #50	; 0x32
 8000a7a:	f7ff fdde 	bl	800063a <ST7735_DrawLine>
	  ST7735_DrawLine(50, 49, 110, 49, BLACK);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2331      	movs	r3, #49	; 0x31
 8000a84:	226e      	movs	r2, #110	; 0x6e
 8000a86:	2131      	movs	r1, #49	; 0x31
 8000a88:	2032      	movs	r0, #50	; 0x32
 8000a8a:	f7ff fdd6 	bl	800063a <ST7735_DrawLine>
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <cursorParaDireita>:
void cursorParaDireita () {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	short i;
	for (i = 1; i <=9; i++) {
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	e041      	b.n	8000b24 <cursorParaDireita+0x90>
	cursorX++;
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <cursorParaDireita+0xa8>)
 8000aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <cursorParaDireita+0xa8>)
 8000ab0:	801a      	strh	r2, [r3, #0]
	if (cursorX == 4 && cursorY == 3) {
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <cursorParaDireita+0xa8>)
 8000ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d10b      	bne.n	8000ad4 <cursorParaDireita+0x40>
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <cursorParaDireita+0xac>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d106      	bne.n	8000ad4 <cursorParaDireita+0x40>
		cursorX = 1;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <cursorParaDireita+0xa8>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	801a      	strh	r2, [r3, #0]
		cursorY = 1;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <cursorParaDireita+0xac>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	801a      	strh	r2, [r3, #0]
 8000ad2:	e010      	b.n	8000af6 <cursorParaDireita+0x62>
	} else if (cursorX == 4) {
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <cursorParaDireita+0xa8>)
 8000ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d10b      	bne.n	8000af6 <cursorParaDireita+0x62>
		cursorX = 1;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <cursorParaDireita+0xa8>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	801a      	strh	r2, [r3, #0]
	    cursorY++;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <cursorParaDireita+0xac>)
 8000ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <cursorParaDireita+0xac>)
 8000af4:	801a      	strh	r2, [r3, #0]
	}

	if (matriz[cursorX - 1][cursorY - 1] == 0)
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <cursorParaDireita+0xa8>)
 8000af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <cursorParaDireita+0xac>)
 8000b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b04:	1e59      	subs	r1, r3, #1
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <cursorParaDireita+0xb0>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <cursorParaDireita+0xa0>
	for (i = 1; i <=9; i++) {
 8000b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	80fb      	strh	r3, [r7, #6]
 8000b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	ddb9      	ble.n	8000aa0 <cursorParaDireita+0xc>
		return;

	}
	fimRodada(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f945 	bl	8000dbc <fimRodada>
 8000b32:	e000      	b.n	8000b36 <cursorParaDireita+0xa2>
		return;
 8000b34:	bf00      	nop
}
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000012 	.word	0x20000012
 8000b44:	20000098 	.word	0x20000098

08000b48 <cursorParaEsquerda>:
void cursorParaEsquerda () {
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	for (;;) {
	cursorX--;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b5c:	801a      	strh	r2, [r3, #0]
	if (cursorX == 0 && cursorY == 1) {
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10b      	bne.n	8000b80 <cursorParaEsquerda+0x38>
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <cursorParaEsquerda+0x8c>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d106      	bne.n	8000b80 <cursorParaEsquerda+0x38>
		cursorX = 3;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	801a      	strh	r2, [r3, #0]
		cursorY = 3;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <cursorParaEsquerda+0x8c>)
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	801a      	strh	r2, [r3, #0]
 8000b7e:	e010      	b.n	8000ba2 <cursorParaEsquerda+0x5a>
	} else if (cursorX == 0) {
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10b      	bne.n	8000ba2 <cursorParaEsquerda+0x5a>
		cursorX = 3;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	801a      	strh	r2, [r3, #0]
		cursorY--;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <cursorParaEsquerda+0x8c>)
 8000b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <cursorParaEsquerda+0x8c>)
 8000ba0:	801a      	strh	r2, [r3, #0]
	}

	if (matriz[cursorX - 1][cursorY - 1] == 0)
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <cursorParaEsquerda+0x88>)
 8000ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <cursorParaEsquerda+0x8c>)
 8000bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb0:	1e59      	subs	r1, r3, #1
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <cursorParaEsquerda+0x90>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d000      	beq.n	8000bc6 <cursorParaEsquerda+0x7e>
	cursorX--;
 8000bc4:	e7c2      	b.n	8000b4c <cursorParaEsquerda+0x4>
		break;
 8000bc6:	bf00      	nop

	}
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	20000012 	.word	0x20000012
 8000bd8:	20000098 	.word	0x20000098

08000bdc <alternaJogador>:
void alternaJogador() {
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	if (*jogador == 'x') {
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <alternaJogador+0x24>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b78      	cmp	r3, #120	; 0x78
 8000be8:	d103      	bne.n	8000bf2 <alternaJogador+0x16>
	   	jogador = "o";
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <alternaJogador+0x24>)
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <alternaJogador+0x28>)
 8000bee:	601a      	str	r2, [r3, #0]
	    } else {
	   	jogador = "x";
	    }
}
 8000bf0:	e002      	b.n	8000bf8 <alternaJogador+0x1c>
	   	jogador = "x";
 8000bf2:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <alternaJogador+0x24>)
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <alternaJogador+0x2c>)
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000014 	.word	0x20000014
 8000c04:	08002260 	.word	0x08002260
 8000c08:	08002258 	.word	0x08002258

08000c0c <piscaCursor>:
void piscaCursor() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	while (1) {
		desenhaQuad (cursorX, cursorY, jogador);
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <piscaCursor+0x10c>)
 8000c14:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <piscaCursor+0x110>)
 8000c1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c1e:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <piscaCursor+0x114>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f7ff fee6 	bl	80009f4 <desenhaQuad>
		for (int x=0;x<20;x++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	e033      	b.n	8000c96 <piscaCursor+0x8a>
		{
			HAL_Delay(50);
 8000c2e:	2032      	movs	r0, #50	; 0x32
 8000c30:	f000 f9fa 	bl	8001028 <HAL_Delay>
			if (botCima || botDireita || botEsquerda || botBaixo)
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	483a      	ldr	r0, [pc, #232]	; (8000d24 <piscaCursor+0x118>)
 8000c3a:	f000 fc55 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d017      	beq.n	8000c74 <piscaCursor+0x68>
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	4836      	ldr	r0, [pc, #216]	; (8000d24 <piscaCursor+0x118>)
 8000c4a:	f000 fc4d 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00f      	beq.n	8000c74 <piscaCursor+0x68>
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	4832      	ldr	r0, [pc, #200]	; (8000d24 <piscaCursor+0x118>)
 8000c5a:	f000 fc45 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d007      	beq.n	8000c74 <piscaCursor+0x68>
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	482e      	ldr	r0, [pc, #184]	; (8000d24 <piscaCursor+0x118>)
 8000c6a:	f000 fc3d 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10d      	bne.n	8000c90 <piscaCursor+0x84>
			{
				HAL_Delay(66);
 8000c74:	2042      	movs	r0, #66	; 0x42
 8000c76:	f000 f9d7 	bl	8001028 <HAL_Delay>
				desenhaQuad (cursorX, cursorY, " ");
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <piscaCursor+0x10c>)
 8000c7c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <piscaCursor+0x110>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <piscaCursor+0x11c>)
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff feb3 	bl	80009f4 <desenhaQuad>
				return;
 8000c8e:	e040      	b.n	8000d12 <piscaCursor+0x106>
		for (int x=0;x<20;x++)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b13      	cmp	r3, #19
 8000c9a:	ddc8      	ble.n	8000c2e <piscaCursor+0x22>
			}
		}
		desenhaQuad (cursorX, cursorY, " ");
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <piscaCursor+0x10c>)
 8000c9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <piscaCursor+0x110>)
 8000ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <piscaCursor+0x11c>)
 8000caa:	4619      	mov	r1, r3
 8000cac:	f7ff fea2 	bl	80009f4 <desenhaQuad>
		for (int x=0;x<20;x++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	e029      	b.n	8000d0a <piscaCursor+0xfe>
		{
			HAL_Delay(50);
 8000cb6:	2032      	movs	r0, #50	; 0x32
 8000cb8:	f000 f9b6 	bl	8001028 <HAL_Delay>
			if (botCima || botDireita || botEsquerda || botBaixo)
 8000cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc0:	4818      	ldr	r0, [pc, #96]	; (8000d24 <piscaCursor+0x118>)
 8000cc2:	f000 fc11 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d017      	beq.n	8000cfc <piscaCursor+0xf0>
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <piscaCursor+0x118>)
 8000cd2:	f000 fc09 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00f      	beq.n	8000cfc <piscaCursor+0xf0>
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <piscaCursor+0x118>)
 8000ce2:	f000 fc01 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <piscaCursor+0xf0>
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <piscaCursor+0x118>)
 8000cf2:	f000 fbf9 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d103      	bne.n	8000d04 <piscaCursor+0xf8>
			{
				HAL_Delay(66);
 8000cfc:	2042      	movs	r0, #66	; 0x42
 8000cfe:	f000 f993 	bl	8001028 <HAL_Delay>
				return;
 8000d02:	e006      	b.n	8000d12 <piscaCursor+0x106>
		for (int x=0;x<20;x++)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b13      	cmp	r3, #19
 8000d0e:	ddd2      	ble.n	8000cb6 <piscaCursor+0xaa>
		desenhaQuad (cursorX, cursorY, jogador);
 8000d10:	e77f      	b.n	8000c12 <piscaCursor+0x6>
			}
		}
	}
}
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000010 	.word	0x20000010
 8000d1c:	20000012 	.word	0x20000012
 8000d20:	20000014 	.word	0x20000014
 8000d24:	40010800 	.word	0x40010800
 8000d28:	08002264 	.word	0x08002264

08000d2c <fimJogada>:
void fimJogada() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if (*jogador == 'x') {
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <fimJogada+0x80>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b78      	cmp	r3, #120	; 0x78
 8000d38:	d110      	bne.n	8000d5c <fimJogada+0x30>
		matriz[cursorX - 1][cursorY - 1] = 1;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <fimJogada+0x84>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <fimJogada+0x88>)
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	1e59      	subs	r1, r3, #1
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <fimJogada+0x8c>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8000d5a:	e010      	b.n	8000d7e <fimJogada+0x52>
	} else {
		matriz[cursorX - 1][cursorY - 1] = -1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <fimJogada+0x84>)
 8000d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <fimJogada+0x88>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <fimJogada+0x8c>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	desenhaQuad (cursorX, cursorY, jogador);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <fimJogada+0x84>)
 8000d80:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <fimJogada+0x88>)
 8000d86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <fimJogada+0x80>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f7ff fe30 	bl	80009f4 <desenhaQuad>
	alternaJogador();
 8000d94:	f7ff ff22 	bl	8000bdc <alternaJogador>
	cursorX = 0;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <fimJogada+0x84>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
	cursorY = 1;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <fimJogada+0x88>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	801a      	strh	r2, [r3, #0]
	cursorParaDireita();
 8000da4:	f7ff fe76 	bl	8000a94 <cursorParaDireita>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000014 	.word	0x20000014
 8000db0:	20000010 	.word	0x20000010
 8000db4:	20000012 	.word	0x20000012
 8000db8:	20000098 	.word	0x20000098

08000dbc <fimRodada>:
void fimRodada(short result) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(BLUE);
 8000dc6:	201f      	movs	r0, #31
 8000dc8:	f7ff fc26 	bl	8000618 <ST7735_FillScreen>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dda:	e7fe      	b.n	8000dda <Error_Handler+0x6>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_MspInit+0x5c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_MspInit+0x5c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_MspInit+0x60>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_MspInit+0x60>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000

08000e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_SPI_MspInit+0x70>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_SPI_MspInit+0x74>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_SPI_MspInit+0x78>)
 8000ea4:	f000 f9c6 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010800 	.word	0x40010800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f875 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
	...

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3e:	f7ff ffe4 	bl	8000f0a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 f951 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff fc03 	bl	8000750 <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f54:	080043b4 	.word	0x080043b4
  ldr r2, =_sbss
 8000f58:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f5c:	200000b0 	.word	0x200000b0

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f929 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff ff2c 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f933 	bl	800121a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f909 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000018 	.word	0x20000018
 8000fe8:	20000020 	.word	0x20000020
 8000fec:	2000001c 	.word	0x2000001c

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000020 	.word	0x20000020
 8001010:	200000ac 	.word	0x200000ac

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	200000ac 	.word	0x200000ac

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000020 	.word	0x20000020

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff90 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff49 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e127      	b.n	8001498 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8116 	bne.w	8001492 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b12      	cmp	r3, #18
 800126c:	d034      	beq.n	80012d8 <HAL_GPIO_Init+0xa4>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d80d      	bhi.n	800128e <HAL_GPIO_Init+0x5a>
 8001272:	2b02      	cmp	r3, #2
 8001274:	d02b      	beq.n	80012ce <HAL_GPIO_Init+0x9a>
 8001276:	2b02      	cmp	r3, #2
 8001278:	d804      	bhi.n	8001284 <HAL_GPIO_Init+0x50>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d031      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d01c      	beq.n	80012bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e048      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001284:	2b03      	cmp	r3, #3
 8001286:	d043      	beq.n	8001310 <HAL_GPIO_Init+0xdc>
 8001288:	2b11      	cmp	r3, #17
 800128a:	d01b      	beq.n	80012c4 <HAL_GPIO_Init+0x90>
          break;
 800128c:	e043      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800128e:	4a89      	ldr	r2, [pc, #548]	; (80014b4 <HAL_GPIO_Init+0x280>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d026      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 8001294:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <HAL_GPIO_Init+0x280>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d806      	bhi.n	80012a8 <HAL_GPIO_Init+0x74>
 800129a:	4a87      	ldr	r2, [pc, #540]	; (80014b8 <HAL_GPIO_Init+0x284>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d020      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012a0:	4a86      	ldr	r2, [pc, #536]	; (80014bc <HAL_GPIO_Init+0x288>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01d      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
          break;
 80012a6:	e036      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a8:	4a85      	ldr	r2, [pc, #532]	; (80014c0 <HAL_GPIO_Init+0x28c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012ae:	4a85      	ldr	r2, [pc, #532]	; (80014c4 <HAL_GPIO_Init+0x290>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d016      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012b4:	4a84      	ldr	r2, [pc, #528]	; (80014c8 <HAL_GPIO_Init+0x294>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e028      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e023      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01e      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e019      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e012      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e008      	b.n	8001316 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d801      	bhi.n	8001320 <HAL_GPIO_Init+0xec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	e001      	b.n	8001324 <HAL_GPIO_Init+0xf0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3304      	adds	r3, #4
 8001324:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d802      	bhi.n	8001332 <HAL_GPIO_Init+0xfe>
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x104>
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	3b08      	subs	r3, #8
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	210f      	movs	r1, #15
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	6a39      	ldr	r1, [r7, #32]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8096 	beq.w	8001492 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <HAL_GPIO_Init+0x298>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a58      	ldr	r2, [pc, #352]	; (80014cc <HAL_GPIO_Init+0x298>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_GPIO_Init+0x298>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137e:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <HAL_GPIO_Init+0x29c>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x19e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x19a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_GPIO_Init+0x2a8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x196>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x192>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x1a0>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x1a0>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x1a0>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x1a0>
 80013d2:	2300      	movs	r3, #0
 80013d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <HAL_GPIO_Init+0x29c>)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	4933      	ldr	r1, [pc, #204]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001416:	4013      	ands	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	492e      	ldr	r1, [pc, #184]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4929      	ldr	r1, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800143e:	4013      	ands	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4924      	ldr	r1, [pc, #144]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	491f      	ldr	r1, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001466:	4013      	ands	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	491a      	ldr	r1, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	60cb      	str	r3, [r1, #12]
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4915      	ldr	r1, [pc, #84]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f aed0 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 80014a8:	bf00      	nop
 80014aa:	372c      	adds	r7, #44	; 0x2c
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	10210000 	.word	0x10210000
 80014b8:	10110000 	.word	0x10110000
 80014bc:	10120000 	.word	0x10120000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10320000 	.word	0x10320000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000
 80014d4:	40010800 	.word	0x40010800
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	40011000 	.word	0x40011000
 80014e0:	40011400 	.word	0x40011400
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]
 8001522:	4613      	mov	r3, r2
 8001524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001526:	787b      	ldrb	r3, [r7, #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001532:	e003      	b.n	800153c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	041a      	lsls	r2, r3, #16
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
	...

08001548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e26c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8087 	beq.w	8001676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001568:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b04      	cmp	r3, #4
 8001572:	d00c      	beq.n	800158e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001574:	4b8f      	ldr	r3, [pc, #572]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d112      	bne.n	80015a6 <HAL_RCC_OscConfig+0x5e>
 8001580:	4b8c      	ldr	r3, [pc, #560]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d10b      	bne.n	80015a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158e:	4b89      	ldr	r3, [pc, #548]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d06c      	beq.n	8001674 <HAL_RCC_OscConfig+0x12c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d168      	bne.n	8001674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e246      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x76>
 80015b0:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a7f      	ldr	r2, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e02e      	b.n	800161c <HAL_RCC_OscConfig+0xd4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x98>
 80015c6:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xd4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0xbc>
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xd4>
 8001604:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a67      	ldr	r2, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fcf6 	bl	8001014 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fcf2 	bl	8001014 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1fa      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xe4>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fce2 	bl	8001014 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fcde 	bl	8001014 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1e6      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x10c>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d063      	beq.n	800174a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001682:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d11c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x18c>
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d116      	bne.n	80016d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x176>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1ba      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4939      	ldr	r1, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	e03a      	b.n	800174a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_RCC_OscConfig+0x270>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fc97 	bl	8001014 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc93 	bl	8001014 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e19b      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4927      	ldr	r1, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_RCC_OscConfig+0x270>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc76 	bl	8001014 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff fc72 	bl	8001014 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e17a      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d03a      	beq.n	80017cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d019      	beq.n	8001792 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_RCC_OscConfig+0x274>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fc56 	bl	8001014 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fc52 	bl	8001014 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e15a      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f000 faa8 	bl	8001ce0 <RCC_Delay>
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_RCC_OscConfig+0x274>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fc3c 	bl	8001014 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179e:	e00f      	b.n	80017c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc38 	bl	8001014 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d908      	bls.n	80017c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e140      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	42420000 	.word	0x42420000
 80017bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	4b9e      	ldr	r3, [pc, #632]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e9      	bne.n	80017a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a6 	beq.w	8001926 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10d      	bne.n	8001806 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b94      	ldr	r3, [pc, #592]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a93      	ldr	r2, [pc, #588]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <HAL_RCC_OscConfig+0x4f8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fbf9 	bl	8001014 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fbf5 	bl	8001014 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0fd      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x4f8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x312>
 800184c:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a7a      	ldr	r2, [pc, #488]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e02d      	b.n	80018b6 <HAL_RCC_OscConfig+0x36e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x334>
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a75      	ldr	r2, [pc, #468]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a72      	ldr	r2, [pc, #456]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	e01c      	b.n	80018b6 <HAL_RCC_OscConfig+0x36e>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x356>
 8001884:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a6c      	ldr	r2, [pc, #432]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a69      	ldr	r2, [pc, #420]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	e00b      	b.n	80018b6 <HAL_RCC_OscConfig+0x36e>
 800189e:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a66      	ldr	r2, [pc, #408]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d015      	beq.n	80018ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fba9 	bl	8001014 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff fba5 	bl	8001014 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0ab      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ee      	beq.n	80018c6 <HAL_RCC_OscConfig+0x37e>
 80018e8:	e014      	b.n	8001914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb93 	bl	8001014 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fb8f 	bl	8001014 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e095      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ee      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8081 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d061      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d146      	bne.n	80019d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_OscConfig+0x4fc>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb63 	bl	8001014 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fb5f 	bl	8001014 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e067      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	492d      	ldr	r1, [pc, #180]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a19      	ldr	r1, [r3, #32]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	430b      	orrs	r3, r1
 800199e:	4927      	ldr	r1, [pc, #156]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x4fc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb33 	bl	8001014 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fb2f 	bl	8001014 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e037      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x46a>
 80019d0:	e02f      	b.n	8001a32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_RCC_OscConfig+0x4fc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb1c 	bl	8001014 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fb18 	bl	8001014 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e020      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x498>
 80019fe:	e018      	b.n	8001a32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e013      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40007000 	.word	0x40007000
 8001a44:	42420060 	.word	0x42420060

08001a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0d0      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	4965      	ldr	r1, [pc, #404]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ac6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d040      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d115      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e073      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06b      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4936      	ldr	r1, [pc, #216]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b38:	f7ff fa6c 	bl	8001014 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff fa68 	bl	8001014 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e053      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d210      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4922      	ldr	r1, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 f821 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bda:	4601      	mov	r1, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	fa21 f303 	lsr.w	r3, r1, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1cc>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9ca 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	0800439c 	.word	0x0800439c
 8001c14:	20000018 	.word	0x20000018
 8001c18:	2000001c 	.word	0x2000001c

08001c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b490      	push	{r4, r7}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c24:	1d3c      	adds	r4, r7, #4
 8001c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x40>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x46>
 8001c5a:	e02d      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c5e:	623b      	str	r3, [r7, #32]
      break;
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c6e:	4413      	add	r3, r2
 8001c70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c5b      	lsrs	r3, r3, #17
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9a:	fb02 f203 	mul.w	r2, r2, r3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	623b      	str	r3, [r7, #32]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cba:	623b      	str	r3, [r7, #32]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc90      	pop	{r4, r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	08002268 	.word	0x08002268
 8001cd0:	08002278 	.word	0x08002278
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <RCC_Delay+0x34>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <RCC_Delay+0x38>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	0a5b      	lsrs	r3, r3, #9
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cfc:	bf00      	nop
  }
  while (Delay --);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	60fa      	str	r2, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f9      	bne.n	8001cfc <RCC_Delay+0x1c>
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000018 	.word	0x20000018
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e076      	b.n	8001e1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3e:	d009      	beq.n	8001d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
 8001d46:	e005      	b.n	8001d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff f866 	bl	8000e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	ea42 0103 	orr.w	r1, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	0c1a      	lsrs	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f002 0204 	and.w	r2, r2, #4
 8001dfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_SPI_Transmit+0x22>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e126      	b.n	8002094 <HAL_SPI_Transmit+0x270>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e4e:	f7ff f8e1 	bl	8001014 <HAL_GetTick>
 8001e52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d002      	beq.n	8001e6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
 8001e66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e68:	e10b      	b.n	8002082 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_SPI_Transmit+0x52>
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e7a:	e102      	b.n	8002082 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d007      	beq.n	8001f02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0a:	d14b      	bne.n	8001fa4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_SPI_Transmit+0xf6>
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d13e      	bne.n	8001f98 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	1c9a      	adds	r2, r3, #2
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f3e:	e02b      	b.n	8001f98 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d112      	bne.n	8001f74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	1c9a      	adds	r2, r3, #2
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f72:	e011      	b.n	8001f98 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f74:	f7ff f84e 	bl	8001014 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d803      	bhi.n	8001f8c <HAL_SPI_Transmit+0x168>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d102      	bne.n	8001f92 <HAL_SPI_Transmit+0x16e>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f96:	e074      	b.n	8002082 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ce      	bne.n	8001f40 <HAL_SPI_Transmit+0x11c>
 8001fa2:	e04c      	b.n	800203e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_SPI_Transmit+0x18e>
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d140      	bne.n	8002034 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	330c      	adds	r3, #12
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fd8:	e02c      	b.n	8002034 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d113      	bne.n	8002010 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	86da      	strh	r2, [r3, #54]	; 0x36
 800200e:	e011      	b.n	8002034 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002010:	f7ff f800 	bl	8001014 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d803      	bhi.n	8002028 <HAL_SPI_Transmit+0x204>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d102      	bne.n	800202e <HAL_SPI_Transmit+0x20a>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002032:	e026      	b.n	8002082 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1cd      	bne.n	8001fda <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8b2 	bl	80021ac <SPI_EndRxTxTransaction>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	77fb      	strb	r3, [r7, #31]
 800207e:	e000      	b.n	8002082 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002080:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002092:	7ffb      	ldrb	r3, [r7, #31]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020ac:	f7fe ffb2 	bl	8001014 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020bc:	f7fe ffaa 	bl	8001014 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	0d1b      	lsrs	r3, r3, #20
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d2:	e054      	b.n	800217e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020da:	d050      	beq.n	800217e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020dc:	f7fe ff9a 	bl	8001014 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d902      	bls.n	80020f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d13d      	bne.n	800216e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210a:	d111      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002114:	d004      	beq.n	8002120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d107      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800212e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002138:	d10f      	bne.n	800215a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e017      	b.n	800219e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3b01      	subs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4013      	ands	r3, r2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d19b      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000018 	.word	0x20000018

080021ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff ff6a 	bl	800209c <SPI_WaitFlagStateUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0220 	orr.w	r2, r3, #32
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e000      	b.n	80021e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2500      	movs	r5, #0
 80021ec:	4e0c      	ldr	r6, [pc, #48]	; (8002220 <__libc_init_array+0x38>)
 80021ee:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	42a5      	cmp	r5, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	f000 f822 	bl	8002240 <_init>
 80021fc:	2500      	movs	r5, #0
 80021fe:	4e0a      	ldr	r6, [pc, #40]	; (8002228 <__libc_init_array+0x40>)
 8002200:	4c0a      	ldr	r4, [pc, #40]	; (800222c <__libc_init_array+0x44>)
 8002202:	1ba4      	subs	r4, r4, r6
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	42a5      	cmp	r5, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002210:	4798      	blx	r3
 8002212:	3501      	adds	r5, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800221a:	4798      	blx	r3
 800221c:	3501      	adds	r5, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	080043ac 	.word	0x080043ac
 8002224:	080043ac 	.word	0x080043ac
 8002228:	080043ac 	.word	0x080043ac
 800222c:	080043b0 	.word	0x080043b0

08002230 <memset>:
 8002230:	4603      	mov	r3, r0
 8002232:	4402      	add	r2, r0
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <memset+0xa>
 8002238:	4770      	bx	lr
 800223a:	f803 1b01 	strb.w	r1, [r3], #1
 800223e:	e7f9      	b.n	8002234 <memset+0x4>

08002240 <_init>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	bf00      	nop
 8002244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002246:	bc08      	pop	{r3}
 8002248:	469e      	mov	lr, r3
 800224a:	4770      	bx	lr

0800224c <_fini>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	bf00      	nop
 8002250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002252:	bc08      	pop	{r3}
 8002254:	469e      	mov	lr, r3
 8002256:	4770      	bx	lr
